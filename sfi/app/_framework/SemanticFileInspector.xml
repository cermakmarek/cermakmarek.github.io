<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SemanticFileInspector</name>
    </assembly>
    <members>
        <member name="T:IS4.SFI.Analyzers.DataAnalyzer">
            <summary>
            This analyzer accepts instances of <see cref="T:IS4.SFI.Services.IStreamFactory"/> or <see cref="T:System.Byte"/> arrays.
            It uses the available properties to describe properties such as hashes, guess the encoding, and derive more specific data formats.
            It produces an instance of <see cref="T:IS4.SFI.Services.IDataObject"/> storing the general information derived from the data,
            and an instance of <see cref="T:IS4.SFI.Services.IBinaryFormatObject`1"/> for each of the recognized format, for further analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.ContentUriFormatter">
            <summary>
            Stores an instance of <see cref="T:IS4.SFI.Services.IHashedContentUriFormatter"/> to be used to
            assign hash-derived URIs to analyzed data objects. If no formatter is provided,
            <see cref="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateUnique(IS4.SFI.Services.ILinkedNodeFactory)"/> is used
            to create a unique node.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.HashAlgorithms">
            <summary>
            A collection of used hash algorithms, as instances of <see cref="T:IS4.SFI.Services.IDataHashAlgorithm"/>,
            whose output is used to describe the data object or to create its URI if it is too long.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.EncodingDetectorFactory">
            <summary>
            A factory of instances of <see cref="T:IS4.SFI.Services.IEncodingDetector"/> which is used
            to guess the encoding of the data, if stored as text.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.DataFormats">
            <summary>
            A collection of recognized formats, as instances of <see cref="T:IS4.SFI.Formats.IBinaryFileFormat"/>.
            They are sorted based on descending <see cref="P:IS4.SFI.Formats.IBinaryFileFormat.HeaderLength"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.FileSizeToWriteToDisk">
            <summary>
            The minimum size at which the data is written to a temporary file on disk
            instead of storing in memory, when a seekable stream cannot be produced
            otherwise.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.MinDataLengthToStore">
            <summary>
            The minimum size at which to consider storing data directly in a URI
            instead of using one of its hashes; see <see cref="M:IS4.SFI.Analyzers.DataAnalyzer.GetMaxDataLengthToStore(System.Int64)"/>
            for details.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.TripleSizeEstimate">
            <summary>
            An estimate of the size of a triple in a data store, used in <see cref="M:IS4.SFI.Analyzers.DataAnalyzer.GetMaxDataLengthToStore(System.Int64)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.MaxDepthForFormats">
            <summary>
            The maximum depth the data is allowed to be as an entity in a hierarchy
            in order to attempt to analyze formats.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataAnalyzer.OutputLog">
            <summary>
            An instance of <see cref="T:System.IO.TextWriter"/> to use for logging.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.DataAnalyzer.GetMaxDataLengthToStore(System.Int64)">
            <summary>
            Calculates the maximum allowed length of input above which the node
            for the data object should not be identified by the data itself.
            The length is not less than <see cref="P:IS4.SFI.Analyzers.DataAnalyzer.MinDataLengthToStore"/>.
            See remarks for the description of how the estimate is chosen.
            </summary>
            <param name="dataSize">The size of the input data.</param>
            <returns>The minimum length of the input at which using hashes to identify it becomes more efficient.</returns>
            <remarks>
            <para>
            A data object is identified either by its actual content as a "data:" URI,
            or through the collection of its hashes as determined by <see cref="P:IS4.SFI.Analyzers.DataAnalyzer.HashAlgorithms"/>.
            Since there is no need to store the hashes when the data itself is present,
            there is a minimum size at which using a "data:" URI becomes inefficient.
            This is estimated based on the number of triples required to store one hash,
            taken from <see cref="P:IS4.SFI.Analyzers.DataAnalyzer.TripleSizeEstimate"/> and <see cref="F:IS4.SFI.Services.HashAlgorithm.TriplesPerHash"/>,
            the size of URI identifying each has, as returned by <see cref="M:IS4.SFI.Services.IHashAlgorithm.EstimateUriSize(System.Int32)"/>,
            If the <see cref="P:IS4.SFI.Analyzers.DataAnalyzer.ContentUriFormatter"/> it specified, <see cref="M:IS4.SFI.Services.IHashedContentUriFormatter.EstimateUriSize(IS4.SFI.Services.IHashAlgorithm,System.Int32)"/>
            is called to estimate the size of the URI identifying the data using its primary hash.
            </para>
            <para>
            The parameter <paramref name="dataSize"/> is used only when calling <see cref="M:IS4.SFI.Services.IHashAlgorithm.GetHashSize(System.Int64)"/>,
            since some hash algorithms may have a variable hash size depending upon the size of the input.
            An estimate of the input size may be provided instead of the precise size.
            </para>
            </remarks>
        </member>
        <member name="M:IS4.SFI.Analyzers.DataAnalyzer.#ctor(System.Func{IS4.SFI.Services.IEncodingDetector})">
            <summary>
            Creates a new instance using a factory of <see cref="T:IS4.SFI.Services.IEncodingDetector"/>.
            </summary>
            <param name="encodingDetectorFactory">The factory to use when the detection of input text encoding is needed.</param>
        </member>
        <member name="M:IS4.SFI.Analyzers.DataAnalyzer.Analyze(System.Byte[],IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.DataAnalyzer.Analyze(IS4.SFI.Services.IStreamFactory,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.DataObjectAnalyzer">
            <summary>
            An analyzer describing instances of <see cref="T:IS4.SFI.Services.IDataObject"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataObjectAnalyzer.LabelSizeSuffixDigits">
            <summary>
            Stores the number of digits used for <see cref="M:IS4.SFI.TextTools.SizeSuffix(System.Int64,System.Int32)"/>
            when creating the label.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.DataObjectAnalyzer.Analyze(IS4.SFI.Services.IDataObject,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.DataObjectAnalyzer.SignatureFormat">
            <summary>
            This improvised format is used for binary files when the signature can be extracted
            via <see cref="M:IS4.SFI.DataTools.ExtractSignature(System.ArraySegment{System.Byte})"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataObjectAnalyzer.SignatureFormat.Extension">
            <summary>
            The extension is the signature of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataObjectAnalyzer.SignatureFormat.MediaType">
            <summary>
            The media type is produced by <see cref="M:IS4.SFI.TextTools.GetFakeMediaTypeFromSignature(System.String)"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Analyzers.DataObjectAnalyzer.InterpreterFormat">
            <summary>
            This improvised format is used for text files when the interpreter command can be extracted
            via <see cref="M:IS4.SFI.DataTools.ExtractInterpreter(System.String)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataObjectAnalyzer.InterpreterFormat.Extension">
            <summary>
            The extension is the interpreter command.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.DataObjectAnalyzer.InterpreterFormat.MediaType">
            <summary>
            The media type is produced by <see cref="M:IS4.SFI.TextTools.GetFakeMediaTypeFromInterpreter(System.String)"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Analyzers.DataObjectAnalyzer.ImprovisedFormat">
            <summary>
            An improvised format is created when there are no other formats detectable from the input.
            Its properties are implied based on the data itself and serve to link data likely in the same format
            even when the format is unknown.
            </summary>
        </member>
        <member name="T:IS4.SFI.Analyzers.FileAnalyzer">
            <summary>
            An analyzer of files and directories, as instances of <see cref="T:IS4.SFI.Services.IFileNodeInfo"/>,
            <see cref="T:IS4.SFI.Services.IFileInfo"/>, <see cref="T:IS4.SFI.Services.IDirectoryInfo"/>, <see cref="T:System.IO.FileInfo"/> or
            <see cref="T:System.IO.DirectoryInfo"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.FileAnalyzer.HashAlgorithms">
            <summary>
            A collection of used hash algorithms, as instances of <see cref="T:IS4.SFI.Services.IFileHashAlgorithm"/>,
            whose output is used to describe the file object.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.#ctor">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.#ctor"/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(IS4.SFI.Services.IFileInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(IS4.SFI.Services.IDirectoryInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(System.IO.FileInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(System.IO.DirectoryInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(System.IO.DriveInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FileAnalyzer.Analyze(IS4.SFI.Services.IFileNodeInfo,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.FileAnalyzer.RootDirectoryUri">
            <summary>
            This class is used to provide a fake URI with the value of
            <see cref="F:IS4.SFI.Analyzers.FileAnalyzer.RootDirectoryUri.Value"/> when .NET would like to change it.
            </summary>
        </member>
        <member name="T:IS4.SFI.Analyzers.FormatObjectAnalyzer">
            <summary>
            An analyzer of format objects as instances of <see cref="T:IS4.SFI.Services.IFormatObject"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.FormatObjectAnalyzer.LabelSizeSuffixDigits">
            <summary>
            Stores the number of digits used for <see cref="M:IS4.SFI.TextTools.SizeSuffix(System.Int64,System.Int32)"/>
            when creating the label.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.FormatObjectAnalyzer.Analyze(IS4.SFI.Services.IFormatObject,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Analyzers.FormatObjectAnalyzer.Analyze``1(``0,IS4.SFI.Services.IFormatObject,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <summary>
            Analyzes <paramref name="format"/> and the value obtained from it.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value extracted from <paramref name="format"/>.</param>
            <param name="format">The format object to analyze.</param>
            <param name="context"><inheritdoc cref="M:IS4.SFI.Analyzers.FormatObjectAnalyzer.Analyze(IS4.SFI.Services.IFormatObject,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)" path="/param[@name='context']"/></param>
            <param name="analyzers"><inheritdoc cref="M:IS4.SFI.Analyzers.FormatObjectAnalyzer.Analyze(IS4.SFI.Services.IFormatObject,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)" path="/param[@name='analyzers']"/></param>
        </member>
        <member name="T:IS4.SFI.Analyzers.MediaObjectAnalyzer`1">
            <summary>
            An analyzer of media objects of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects supported by this analyzer.</typeparam>
        </member>
        <member name="M:IS4.SFI.Analyzers.MediaObjectAnalyzer`1.#ctor(System.Collections.Generic.IEnumerable{IS4.SFI.Vocabulary.ClassUri})">
            <summary>
            Creates a new instance of the analyzer from a collection of classes applicable to the type.
            </summary>
            <param name="classes">The collection of classes.</param>
        </member>
        <member name="M:IS4.SFI.Analyzers.MediaObjectAnalyzer`1.#ctor(IS4.SFI.Vocabulary.ClassUri[])">
            <summary>
            Creates a new instance of the analyzer from a collection of classes applicable to the type.
            </summary>
            <param name="classes">The collection of classes.</param>
        </member>
        <member name="M:IS4.SFI.Analyzers.MediaObjectAnalyzer`1.InitNode(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.AnalysisContext)">
            <summary>
            Assigns the classes specified during construction of the analyzer to newly
            constructed nodes.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.X509CertificateAnalyzer">
            <summary>
            An analyzer of X.509 certificates, expressed as instances of <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.X509CertificateAnalyzer.DescribeExtensions">
            <summary>
            Whether to use the certificate's extensions to provide additional description.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.X509CertificateAnalyzer.#ctor">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.#ctor"/>
        </member>
        <member name="M:IS4.SFI.Analyzers.X509CertificateAnalyzer.Analyze(System.Security.Cryptography.X509Certificates.X509Certificate,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.XmlAnalyzer">
            <summary>
            An analyzer of XML documents, expressed using the common class <see cref="T:System.Xml.XmlReader"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Analyzers.XmlAnalyzer.XmlFormats">
            <summary>
            A collection of XML formats, as instances of <see cref="T:IS4.SFI.Formats.IXmlDocumentFormat"/>,
            to use when recognizing the format of the document.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.XmlAnalyzer.#ctor">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.#ctor"/>
        </member>
        <member name="M:IS4.SFI.Analyzers.XmlAnalyzer.Analyze(System.Xml.XmlReader,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat">
            <summary>
            This is an improvised format implied by the root namespace or PUBLIC identifier
            referenced by the document.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat.GetMediaType(IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat.XmlFormat)">
            <summary>
            The media type is produced by <see cref="M:IS4.SFI.TextTools.GetFakeMediaTypeFromXml(System.Uri,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat.GetExtension(IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat.XmlFormat)">
            <summary>
            The extension is the local name of the root element.
            </summary>
        </member>
        <member name="T:IS4.SFI.Analyzers.XmlAnalyzer.ImprovisedXmlFormat.XmlFormat">
            <summary>
            A class storing all the necessary information to identify an
            implied XML format from the DTD and the name of the root element.
            </summary>
        </member>
        <member name="T:IS4.SFI.ComponentCollectionAttribute">
            <summary>
            This attribute is applied to properties, indicating that the property
            contains a collection of configurable components.
            </summary>
        </member>
        <member name="P:IS4.SFI.ComponentCollectionAttribute.Prefix">
            <summary>
            The prefix identifying the collection.
            </summary>
        </member>
        <member name="P:IS4.SFI.ComponentCollectionAttribute.CommonType">
            <summary>
            The common type of the objects in the collection, or <see langword="null"/>
            if it can be deduced from the collection.
            </summary>
        </member>
        <member name="M:IS4.SFI.ComponentCollectionAttribute.#ctor(System.String,System.Type)">
            <summary>
            Creates a new instance of the attribute.
            </summary>
            <param name="prefix">The value of <see cref="P:IS4.SFI.ComponentCollectionAttribute.Prefix"/>.</param>
            <param name="commonType">The value of <see cref="P:IS4.SFI.ComponentCollectionAttribute.CommonType"/>.</param>
        </member>
        <member name="T:IS4.SFI.DataTools">
            <summary>
            Stores many utility methods for manipulating data and deriving information from it.
            </summary>
        </member>
        <member name="F:IS4.SFI.DataTools.MaxBomLength">
            <summary>
            The maximum length of a BOM in all Unicode encodings.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.FindBom(System.ReadOnlySpan{System.Byte})">
            <summary>
            Determines if the input starts with a Unicode BOM and returns its length.
            </summary>
            <param name="data">The input as a span of bytes.</param>
            <returns>The length of the BOM, if any, or 0.</returns>
        </member>
        <member name="M:IS4.SFI.DataTools.Base32``1(``0,System.Text.StringBuilder,System.String)">
            <summary>
            Computes a base32-encoded string from a sequence of bytes.
            </summary>
            <typeparam name="TList">The type of the byte sequence.</typeparam>
            <param name="bytes">The sequence to compute from.</param>
            <param name="sb">An instance of <see cref="T:System.Text.StringBuilder"/> that receives the output.</param>
            <param name="alphabet">The alphabet to use; the default is "QAZ2WSX3EDC4RFV5TGB6YHN7UJM8K9LP".</param>
        </member>
        <member name="M:IS4.SFI.DataTools.Base58``1(``0,System.Text.StringBuilder,System.String)">
            <summary>
            Computes a base58-encoded string from a sequence of bytes.
            </summary>
            <typeparam name="TList">The type of the byte sequence.</typeparam>
            <param name="bytes">The sequence to compute from.</param>
            <param name="sb">An instance of <see cref="T:System.Text.StringBuilder"/> that receives the output.</param>
            <param name="alphabet">The alphabet to use; the default is "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz".</param>
        </member>
        <member name="M:IS4.SFI.DataTools.Base64Url(System.ArraySegment{System.Byte},System.Text.StringBuilder)">
            <summary>
            Computes a base64url-encoded string from a sequence of bytes.
            The "+/" characters are replaced with "-_" in the alphabet. Trailing "=" is stripped.
            </summary>
            <param name="bytes">The sequence to compute from.</param>
            <param name="sb">An instance of <see cref="T:System.Text.StringBuilder"/> that receives the output.</param>
        </member>
        <member name="M:IS4.SFI.DataTools.Base64Url(System.Byte[],System.Text.StringBuilder)">
            <summary>
            Computes a base64url-encoded string from a sequence of bytes.
            The "+/" characters are replaced with "-_" in the alphabet. Trailing "=" is stripped.
            </summary>
            <param name="bytes">The sequence to compute from.</param>
            <param name="sb">An instance of <see cref="T:System.Text.StringBuilder"/> that receives the output.</param>
        </member>
        <member name="M:IS4.SFI.DataTools.Varint(System.UInt64)">
            <summary>
            Encodes a <see cref="T:System.UInt64"/> value as a variable-length integer.
            </summary>
            <param name="value">The input value to encode.</param>
            <returns>
            A collection of bytes encoding <paramref name="value"/>,
            in the form described by https://github.com/multiformats/unsigned-varint.
            </returns>
        </member>
        <member name="M:IS4.SFI.DataTools.EncodeMultihash(System.UInt64,System.Byte[],System.Nullable{System.Int32})">
            <summary>
            Encodes a multihash value. See https://github.com/multiformats/multihash for details.
            </summary>
            <param name="id">The identifier of the particular hash.</param>
            <param name="hash">An array storing the bytes of the hash.</param>
            <param name="hashLength">The length of the hash as stored in the result.</param>
            <returns>A list of bytes representing the multihash.</returns>
        </member>
        <member name="F:IS4.SFI.DataTools.invalidSigBytes">
            <summary>
            Text characters whose presence invalidates a signature.
            </summary>
        </member>
        <member name="F:IS4.SFI.DataTools.recognizedSigBytes">
            <summary>
            Characters that are allowed to be recognized as part of a signature.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.ExtractSignature(System.ArraySegment{System.Byte})">
            <summary>
            Extracts the first initial bytes of <paramref name="header"/> and returns them
            as a string if they could correspond to a valid signature.
            </summary>
            <param name="header">The initial part of a file's data.</param>
            <returns>The signature bytes as an ASCII string, or <see langword="null"/> if there is no valid signature.</returns>
            <remarks>
            The signature is the portion at the beginning of the header between 2 and 8 characters,
            allowing to contain characters a-zA-Z0-9. If a whitespace character, a hyphen or an underscore
            character occurs after the signature, it is invalidated.
            </remarks>
        </member>
        <member name="F:IS4.SFI.DataTools.firstLineRegex">
            <summary>
            Matches the first line of a string.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.ExtractFirstLine(System.String)">
            <summary>
            Extracts the first line from <paramref name="text"/>.
            </summary>
            <param name="text">The input string.</param>
            <returns>The first line, not counting the trailing CR or LF character..</returns>
        </member>
        <member name="F:IS4.SFI.DataTools.interpreterRegex">
            <summary>
            Matches the first line of a string, capturing the command after a shebang sequence.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.ExtractInterpreter(System.String)">
            <summary>
            Extracts the interpreter command from a shebang sequence at the beginning of <paramref name="text"/>.
            </summary>
            <param name="text">The input string, expected to begin with a shebang (#!) sequence.</param>
            <returns>
            The command part of the shebang sequence, in the form "#!{path}/{command} {arguments}"
            or "#!{path}/env {command} {arguments}".
            </returns>
        </member>
        <member name="F:IS4.SFI.DataTools.controlReplacement">
            <summary>
            Matches a C0 control character that can't be displayed in a text.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.GetReplacementChar(System.Char)">
            <summary>
            Returns a replacement character for a C0 control character, in
            the Unicode block starting from U+2400.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.ReplaceControlCharacters(System.String,System.Text.Encoding)">
            <summary>
            Replaces undisplayable control characters in <paramref name="str"/> in a way
            that is reversible, based on the capabilities of <paramref name="originalEncoding"/>.
            </summary>
            <param name="str">The string to replace characters in.</param>
            <param name="originalEncoding">The original encoding in which the string was decoded, or <see langword="null"/>.</param>
            <returns>
            A string formed from the characters in <paramref name="str"/>, but with control characters
            replaced with their respective Unicode replacement characters starting from U+2400.
            If <paramref name="originalEncoding"/> is a Unicode encoding or other encoding
            that can encode the replacement characters, the characters are left unchanged,
            because it would be ambiguous whether they were a part of the original text or not.
            </returns>
        </member>
        <member name="M:IS4.SFI.DataTools.IsBinary(System.ArraySegment{System.Byte})">
            <summary>
            Determines whether a byte sequence encodes binary, or non-textual, data.
            </summary>
            <param name="data">A complete sequence of bytes to be checked.</param>
            <returns><see langword="true"/> if the data is not textual, <see langword="false"/> otherwise.</returns>
            <remarks>
            Usually, text is not allowed to contain the NUL character.
            This condition is loosened a bit here: a text may end with
            any number of NUL characters, but it cannot contain a non-NUL character
            after a NUL character, and it cannot start with a NUL character.
            </remarks>
        </member>
        <member name="M:IS4.SFI.DataTools.GuidFromName(System.Byte[],System.String)">
            <summary>
            Creates a v5 (SHA1-encoded) UUID from a namespace UUID and a name.
            </summary>
            <param name="namespaceBytes">The UUID of the namespaces, encoded in bytes.</param>
            <param name="name">The name in a form specific to the namespaces.</param>
            <returns>
            An instance of <see cref="T:System.Guid"/> formed by hashing the
            <paramref name="namespaceBytes"/> followed by <paramref name="name"/>,
            encoded in UTF-8, wrapped in a UUID structure.
            </returns>
        </member>
        <member name="M:IS4.SFI.DataTools.GuidFromHash(System.Byte[])">
            <summary>
            Creates a v5 <see cref="T:System.Guid"/> instance from a hash.
            </summary>
            <param name="hash">The bytes of the hash.</param>
            <returns>The resulting <see cref="T:System.Guid"/>, created from the first 16 bytes of the hash.</returns>
        </member>
        <member name="F:IS4.SFI.DataTools.guidIsMemoryCastSafe">
            <summary>
            Indicates whether the memory layout of <see cref="T:System.Guid"/> on this platform
            matches its <see cref="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])"/> constructor
            and is therefore safe to construct from plain bytes in this format.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.GuidFromBytes(System.Span{System.Byte})">
            <summary>
            Creates a <see cref="T:System.Guid"/> instance from the provided bytes.
            </summary>
            <param name="b">The byte span to use. May be modified during construction.</param>
            <returns>A new <see cref="T:System.Guid"/> with the specified data.</returns>
        </member>
        <member name="F:IS4.SFI.DataTools.unsafeStringRegex">
            <summary>
            Matches a string that is unsafe for embedding or displaying. See <see cref="M:IS4.SFI.DataTools.IsSafeString(System.String)"/> for details.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.IsSafeString(System.String)">
            <summary>
            Determines whether <paramref name="str"/> is a string safe for displaying or storing as text.
            </summary>
            <param name="str"></param>
            <returns><see langword="true"/> if the string contains unsafe characters, <see langword="false"/> otherwise.</returns>
            <remarks>
            XML 1.0 prohibits C0 control codes and discourages the use of C1, with the exception of line separators;
            such characters cannot be encoded in RDF/XML and therefore are semantically invalid.
            Unpaired surrogate characters are also prohibited (since the input must be a valid UTF-16 string).
            Additionally, a leading combining character or ZWJ could cause troubles when displayed.
            The string also shall not contain any unassigned Unicode characters.
            </remarks>
        </member>
        <member name="M:IS4.SFI.DataTools.CreateLiteralJsonLd(System.String)">
            <summary>
            Creates a JSON-LD literal from a string value.
            </summary>
            <param name="value">The value of the literal.</param>
            <returns>A valid JSON string with the @value field.</returns>
        </member>
        <member name="M:IS4.SFI.DataTools.CreateLiteralJsonLd(System.String,System.Uri)">
            <summary>
            Creates a JSON-LD literal from a string value and its datatype.
            </summary>
            <param name="value">The value of the literal.</param>
            <param name="datatype">The datatype of the literal.</param>
            <returns>A valid JSON string with the @value and @type fields.</returns>
        </member>
        <member name="M:IS4.SFI.DataTools.CreateLiteralJsonLd(System.String,System.String)">
            <summary>
            Creates a JSON-LD literal from a string value and its language tag.
            </summary>
            <param name="value">The value of the literal.</param>
            <param name="language">The language tag of the literal.</param>
            <returns>A valid JSON string with the @value and @language fields.</returns>
        </member>
        <member name="F:IS4.SFI.DataTools.XmpMetaName">
            <summary>
            Stores the qualified name of the &lt;x:xmpmeta&gt; element.
            </summary>
        </member>
        <member name="F:IS4.SFI.DataTools.RdfName">
            <summary>
            Stores the qualified name of the &lt;rdf:RDF&gt; element.
            </summary>
        </member>
        <member name="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Describes <paramref name="node"/> using RDF/XML data stored in an XMP stream.
            </summary>
            <param name="node">The node to describe.</param>
            <param name="stream">The XMP stream.</param>
            <param name="subjectUris">A collection of URIs that represent the subject.</param>
        </member>
        <member name="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.TextReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
            <param name="node"><inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='node']"/></param>
            <param name="reader">The XML text stream reader.</param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
        </member>
        <member name="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
            <param name="node"><inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='node']"/></param>
            <param name="xmlReader">The XML reader, positioned at the beginning of the document.</param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.DataTools.DescribeAsXmp(IS4.SFI.Services.ILinkedNode,System.IO.Stream,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
        </member>
        <member name="T:IS4.SFI.DirectoryTools">
            <summary>
            Stores utility methods for manipulating hierarchical structures.
            </summary>
        </member>
        <member name="M:IS4.SFI.DirectoryTools.GroupByDirectories``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Groups a collection of objects each having a path based on the initial directory
            specified in the path.
            </summary>
            <typeparam name="TEntry">The type of the objects.</typeparam>
            <param name="entries">A collection of objects. Each should have a path determined by <paramref name="pathSelector"/>.</param>
            <param name="pathSelector">A function which should return the path of each object in <paramref name="entries"/>.</param>
            <returns>
            A sequence of instances of <see cref="T:System.Linq.IGrouping`2"/> of the objects,
            where the <see cref="P:System.Linq.IGrouping`2.Key"/> is the path to the first directory
            storing the entry.
            </returns>
        </member>
        <member name="M:IS4.SFI.DirectoryTools.GroupByDirectories``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Func{``0,``1})">
            <summary>
            Groups a collection of objects each having a path based on the initial directory
            specified in the path.
            </summary>
            <typeparam name="TEntry">The type of the objects.</typeparam>
            <typeparam name="TValue">The type of the result.</typeparam>
            <param name="entries">A collection of objects. Each should have a path determined by <paramref name="pathSelector"/>.</param>
            <param name="pathSelector">A function which should return the path of each object in <paramref name="entries"/>.</param>
            <param name="valueSelector">A function that transforms a <typeparamref name="TEntry"/> into a value stored in the resulting <see cref="T:IS4.SFI.DirectoryTools.EntryInfo`1"/>.</param>
            <returns>
            A sequence of instances of <see cref="T:System.Linq.IGrouping`2"/> of the objects,
            where the <see cref="P:System.Linq.IGrouping`2.Key"/> is the path to the first directory
            storing the entry.
            </returns>
        </member>
        <member name="M:IS4.SFI.DirectoryTools.GetFirstDir(System.String)">
            <summary>
            Splits <paramref name="path"/> based on the first '/'.
            </summary>
        </member>
        <member name="T:IS4.SFI.DirectoryTools.EntryInfo`1">
            <summary>
            Stores an information about an entry in a hierarchical structure, such
            as a hierarchy of directories in a file system.
            </summary>
            <typeparam name="TEntry">The type of the entry.</typeparam>
        </member>
        <member name="P:IS4.SFI.DirectoryTools.EntryInfo`1.SubPath">
            <summary>
            The path of the entry, relative to an initial directory.
            </summary>
        </member>
        <member name="P:IS4.SFI.DirectoryTools.EntryInfo`1.Entry">
            <summary>
            The value of the entry.
            </summary>
        </member>
        <member name="M:IS4.SFI.DirectoryTools.EntryInfo`1.#ctor(System.String,`0)">
            <summary>
            Creates a new instance of the entry.
            </summary>
            <param name="subpath">The value of <see cref="P:IS4.SFI.DirectoryTools.EntryInfo`1.SubPath"/>.</param>
            <param name="entry">The value of <see cref="P:IS4.SFI.DirectoryTools.EntryInfo`1.Entry"/>.</param>
        </member>
        <member name="T:IS4.SFI.DynamicExtensions">
            <summary>
            Stores extension methods for operations on a <see cref="T:IS4.SFI.Services.ILinkedNode"/> or <see cref="T:IS4.SFI.Services.IEntityAnalyzers"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.DynamicExtensions.TryAnalyze``1(IS4.SFI.Services.IEntityAnalyzers,``0,IS4.SFI.Services.AnalysisContext)">
            <summary>
            Dynamically calls <see cref="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)"/>
            based on the runtime type of <paramref name="entity"/> constrained to type <typeparamref name="TConstraint"/>.
            </summary>
            <param name="analyzers">The instance of <see cref="T:IS4.SFI.Services.IEntityAnalyzers"/> to use.</param>
            <param name="entity">The entity to analyze.</param>
            <param name="context">The context to be passed to <see cref="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)"/>.</param>
            <typeparam name="TConstraint">The constraining type to affect the selected runtime type.</typeparam>
            <returns>The result from the method, or the default value of <see cref="T:IS4.SFI.Services.AnalysisResult"/> on failure.</returns>
        </member>
        <member name="T:IS4.SFI.DynamicExtensions.Constrained`1">
            <summary>
            Helper class to constrain the <see cref="M:IS4.SFI.DynamicExtensions.Constrained`1.Analyze``1(IS4.SFI.Services.IEntityAnalyzers,``0,IS4.SFI.Services.AnalysisContext)"/> method
            to an argument compatible with <typeparamref name="TConstraint"/>.
            </summary>
            <typeparam name="TConstraint">The constraining type.</typeparam>
        </member>
        <member name="M:IS4.SFI.DynamicExtensions.Constrained`1.Analyze``1(IS4.SFI.Services.IEntityAnalyzers,``0,IS4.SFI.Services.AnalysisContext)">
            <inheritdoc cref="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)"/>
            <param name="analyzers">The instance of <see cref="T:IS4.SFI.Services.IEntityAnalyzers"/> to use.</param>
            <param name="entity"><inheritdoc cref="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)" path="/param[@name='entity']"/></param>
            <param name="context"><inheritdoc cref="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)" path="/param[@name='context']"/></param>
        </member>
        <member name="M:IS4.SFI.DynamicExtensions.TrySet(IS4.SFI.Services.ILinkedNode,IS4.SFI.Vocabulary.PropertyUri,System.ValueType)">
            <summary>
            Dynamically calls <see cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0)"/>
            based on the runtime type of <paramref name="value"/>.
            </summary>
            <param name="node">The instance of <see cref="T:IS4.SFI.Services.ILinkedNode"/> to use.</param>
            <param name="property">The property to assign.</param>
            <param name="value">The value of the property.</param>
            <returns>Whether the call was successful or not.</returns>
        </member>
        <member name="M:IS4.SFI.DynamicExtensions.TrySet``1(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.ValueType)">
            <summary>
            Dynamically calls <see cref="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1)"/>
            based on the runtime type of <paramref name="value"/>.
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="node">The instance of <see cref="T:IS4.SFI.Services.ILinkedNode"/> to use.</param>
            <param name="propertyFormatter">The formatter to provide the property based on <paramref name="propertyValue"/>.</param>
            <param name="propertyValue">The value to pass to the <paramref name="propertyFormatter"/>.</param>
            <param name="value">The value of the property.</param>
            <returns>Whether the call was successful or not.</returns>
        </member>
        <member name="T:IS4.SFI.EntityAnalyzerProvider">
            <summary>
            This class implements <see cref="T:IS4.SFI.Services.IEntityAnalyzers"/>, storing a collection of
            type-based analyzers in <see cref="P:IS4.SFI.EntityAnalyzerProvider.Analyzers"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.EntityAnalyzerProvider.Analyzers">
            <summary>
            A collection of analyzers, each implementing <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.EntityAnalyzerProvider.ContainerProviders">
            <summary>
            A collection of instances of <see cref="T:IS4.SFI.Services.IContainerAnalyzerProvider"/> to use to
            process the hierarchy.
            </summary>
        </member>
        <member name="P:IS4.SFI.EntityAnalyzerProvider.OutputLog">
            <summary>
            An instance of <see cref="T:System.IO.TextWriter"/> to use for logging.
            </summary>
        </member>
        <member name="E:IS4.SFI.EntityAnalyzerProvider.Updated">
            <summary>
            Called when a new entity is or was analyzed.
            </summary>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.Update">
            <summary>
            Invokes the <see cref="E:IS4.SFI.EntityAnalyzerProvider.Updated"/> event.
            </summary>
        </member>
        <member name="F:IS4.SFI.EntityAnalyzerProvider.typeCounters">
            <summary>
            Stores a counter for every encountered entity type identifier.
            </summary>
        </member>
        <member name="F:IS4.SFI.EntityAnalyzerProvider.noAnalyzerWarned">
            <summary>
            Stores if a 
            </summary>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.Analyze``1(``0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <summary>
            Traverses the <see cref="P:IS4.SFI.EntityAnalyzerProvider.Analyzers"/> and picks the first to implement
            <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> of <typeparamref name="T"/> to analyze
            <paramref name="entity"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.MatchRoot``1(``0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers,System.Collections.Generic.IReadOnlyCollection{IS4.SFI.Services.IContainerAnalyzerProvider})">
            <summary>
            Selects the <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerProviders"/> based on the result of
            <see cref="M:IS4.SFI.Services.IContainerAnalyzerProvider.MatchRoot``1(``0,IS4.SFI.Services.AnalysisContext)"/>
            of the particular <paramref name="root"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2">
            <summary>
            Provides an implementation of <see cref="T:IS4.SFI.Services.IEntityAnalyzers"/>
            and <see cref="T:IS4.SFI.Services.IContainerNode`2"/> that is used
            to describe and analyze a node in a container hierarchy.
            </summary>
            <typeparam name="TValue">The type of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2.Value"/>.</typeparam>
            <typeparam name="TParent">The type of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2.ParentNode"/>.</typeparam>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2.#ctor(`1,`0,System.Collections.Generic.IEnumerable{IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo},IS4.SFI.EntityAnalyzerProvider,IS4.SFI.Services.IEntityAnalyzers)">
            <summary>
            Creates a new instance of the node.
            </summary>
            <param name="parentNode">The value of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2.ParentNode"/>.</param>
            <param name="value">The value of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerNode`2.Value"/>.</param>
            <param name="activeAnalyzers">The collection of analyzers that should be used to process the node.</param>
            <param name="baseProvider">The instance of <see cref="T:IS4.SFI.EntityAnalyzerProvider"/> that initiated the analysis.</param>
            <param name="analyzers">The base collection of analyzers.</param>
        </member>
        <member name="T:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo">
            <summary>
            Stores information about an instance of <see cref="T:IS4.SFI.Services.IContainerAnalyzer"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.Analyzer">
            <summary>
            The stored analyzer.
            </summary>
        </member>
        <member name="P:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.Provider">
            <summary>
            The provider that was used to obtain <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.Analyzer"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.#ctor(IS4.SFI.Services.IContainerAnalyzer,IS4.SFI.Services.IContainerAnalyzerProvider)">
            <summary>
            Creates a new instance of the type.
            </summary>
            <param name="analyzer">The value of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.Analyzer"/>.</param>
            <param name="provider">The value of <see cref="P:IS4.SFI.EntityAnalyzerProvider.ContainerAnalysisInfo.Provider"/>.</param>
        </member>
        <member name="M:IS4.SFI.EntityAnalyzerProvider.EntityAnalyzerComparer.SelectType(System.Type)">
            <summary>
            Retrieves all implemented interfaces of <paramref name="initial"/> that
            are generic instantiations of <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/>.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.FileTools">
            <summary>
            Stores utility methods for manipulating files.
            </summary>
        </member>
        <member name="M:IS4.SFI.FileTools.GetTemporaryFile(System.String)">
            <summary>
            Produces a disposable instance of <see cref="T:IS4.SFI.FileTools.TemporaryFile"/> from a newly created
            temporary file whose name is based on <paramref name="identifier"/>.
            </summary>
            <param name="identifier">Part of the temporary file's name to distinguish it among others.</param>
            <returns>A new instance of <see cref="T:IS4.SFI.FileTools.TemporaryFile"/> representing the file.</returns>
        </member>
        <member name="T:IS4.SFI.FileTools.TemporaryFile">
            <summary>
            Managed the lifetime of a temporary file.
            </summary>
        </member>
        <member name="P:IS4.SFI.FileTools.TemporaryFile.Path">
            <summary>
            The path to the file.
            </summary>
        </member>
        <member name="M:IS4.SFI.FileTools.TemporaryFile.op_Implicit(IS4.SFI.FileTools.TemporaryFile)~System.String">
            <summary>
            Returns the value of the <see cref="P:IS4.SFI.FileTools.TemporaryFile.Path"/> property.
            </summary>
            <param name="file">The instance to retrieve the value from.</param>
        </member>
        <member name="M:IS4.SFI.FileTools.TemporaryFile.Dispose">
            <summary>
            If the temporary file still exists, deletes it.
            </summary>
        </member>
        <member name="M:IS4.SFI.FileTools.TemporaryFile.Equals(IS4.SFI.FileTools.TemporaryFile)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.IBinaryFileFormat">
            <summary>
            Represents an instance of <see cref="T:IS4.SFI.Formats.IFileFormat"/> for a format
            based on binary data.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IBinaryFileFormat.HeaderLength">
            <summary>
            The minimum length of the header that should be read from a file
            before calling <see cref="M:IS4.SFI.Formats.IBinaryFileFormat.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IBinaryFileFormat.CheckHeader(System.ArraySegment{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <summary>
            Determines whether a file beginning with <paramref name="header"/> could
            be in a format represented by this instance.
            </summary>
            <param name="header">A collection of bytes from the beginning of the file.</param>
            <param name="isBinary">Whether the file was detected as binary or not.</param>
            <param name="encodingDetector">The specific instance of <see cref="T:IS4.SFI.Services.IEncodingDetector"/> used to determine the encoding.</param>
            <returns><see langword="false"/> if the file cannot possibly be in this format, <see langword="true"/> otherwise.</returns>
        </member>
        <member name="M:IS4.SFI.Formats.IBinaryFileFormat.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <summary>
            Determines whether a file beginning with <paramref name="header"/> could
            be in a format represented by this instance.
            </summary>
            <param name="header">A collection of bytes from the beginning of the file.</param>
            <param name="isBinary">Whether the file was detected as binary or not.</param>
            <param name="encodingDetector">The specific instance of <see cref="T:IS4.SFI.Services.IEncodingDetector"/> used to determine the encoding.</param>
            <returns><see langword="false"/> if the file cannot possibly be in this format, <see langword="true"/> otherwise.</returns>
        </member>
        <member name="M:IS4.SFI.Formats.IBinaryFileFormat.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.IResultFactory{``0,``1},``1)">
            <summary>
            Attempts to match this format from a file, producing an object that describes
            the media object stored in the file. The object is obtained
            using the provided <see cref="T:IS4.SFI.IResultFactory`2"/>.
            </summary>
            <typeparam name="TResult">User-specified result type passed to <paramref name="resultFactory"/>.</typeparam>
            <typeparam name="TArgs">User-specified arguments type passed to <paramref name="resultFactory"/>.</typeparam>
            <param name="stream">The stream to analyze.</param>
            <param name="context">Additional information relevant to the match.</param>
            <param name="resultFactory">A receiver object that is provided the result of the match, if any.</param>
            <param name="args">User-specified arguments passed to <paramref name="resultFactory"/>.</param>
            <returns>
            The result of <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/> when given the produced object,
            or the default value of <typeparamref name="TResult"/> when the match isn't successful.
            </returns>
            <exception cref="T:System.Exception">
            Any exception may be caused during the internal parsing of the format.
            </exception>
        </member>
        <member name="T:IS4.SFI.Formats.IBinaryFileFormat`1">
            <summary>
            Represents an instance of <see cref="T:IS4.SFI.Formats.IFileFormat`1"/> for a format
            based on binary data, producing instances of <typeparamref name="T"/>
            to describe the media object.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="M:IS4.SFI.Formats.IBinaryFileFormat`1.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{`0,``0,``1},``1)">
            <summary>
            Attempts to match this format from a file, producing an object that describes
            the media object stored in the file. The object is obtained
            using the provided <see cref="T:IS4.SFI.ResultFactory`3"/>.
            </summary>
            <typeparam name="TResult">User-specified result type passed to <paramref name="resultFactory"/>.</typeparam>
            <typeparam name="TArgs">User-specified arguments type passed to <paramref name="resultFactory"/>.</typeparam>
            <param name="stream">The stream to analyze.</param>
            <param name="context">Additional information relevant to the match.</param>
            <param name="resultFactory">A receiver object that is provided the result of the match, if any.</param>
            <param name="args">User-specified arguments passed to <paramref name="resultFactory"/>.</param>
            <returns>
            The result of <see cref="M:IS4.SFI.ResultFactory`3.Invoke(`0,`2)"/> when given the produced object,
            or the default value of <typeparamref name="TResult"/> when the match isn't successful.
            </returns>
            <exception cref="T:System.Exception">
            Any exception may be caused during the internal parsing of the format.
            </exception>
        </member>
        <member name="T:IS4.SFI.Formats.BinaryFileFormat`1">
            <summary>
            Provides a base implementation of <see cref="T:IS4.SFI.Formats.IBinaryFileFormat`1"/>.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="P:IS4.SFI.Formats.BinaryFileFormat`1.HeaderLength">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.BinaryFileFormat`1.#ctor(System.Int32,System.String,System.String)">
            <param name="headerLength">The value of <see cref="P:IS4.SFI.Formats.BinaryFileFormat`1.HeaderLength"/>.</param>
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.BinaryFileFormat`1.CheckHeader(System.ArraySegment{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.BinaryFileFormat`1.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.BinaryFileFormat`1.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{`0,``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.BinaryFileFormat`1.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.IResultFactory{``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.IFileFormat">
            <summary>
            Represents a general file format or a collection of related file formats.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IFileFormat.GetMediaType(System.Object)">
            <summary>
            Returns the media type of an object describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A MIME type based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IFileFormat.GetExtension(System.Object)">
            <summary>
            Returns the common extension of an object describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>An extension based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="T:IS4.SFI.Formats.IFileFormat`1">
            <summary>
            Represents a general file format whose media objects can be described
            using instances of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="M:IS4.SFI.Formats.IFileFormat`1.GetMediaType(`0)">
            <summary>
            Returns the media type of an object describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A MIME type based on <paramref name="value"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Formats.IFileFormat`1.GetExtension(`0)">
            <summary>
            Returns the common extension of an object describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A MIME type based on <paramref name="value"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Formats.FileFormat`1">
            <summary>
            Provides a base implementation of <see cref="T:IS4.SFI.Formats.IFileFormat`1"/>.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="P:IS4.SFI.Formats.FileFormat`1.MediaType">
            <summary>
            The common media type, used if there is no other implementation
            of <see cref="M:IS4.SFI.Formats.FileFormat`1.GetMediaType(`0)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.FileFormat`1.Extension">
            <summary>
            The common extension, used if there is no other implementation
            of <see cref="M:IS4.SFI.Formats.FileFormat`1.GetExtension(`0)"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the format.
            </summary>
            <param name="mediaType">The value of <see cref="P:IS4.SFI.Formats.FileFormat`1.MediaType"/>.</param>
            <param name="extension">The value of <see cref="P:IS4.SFI.Formats.FileFormat`1.Extension"/>.</param>
        </member>
        <member name="M:IS4.SFI.Formats.FileFormat`1.GetExtension(`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.FileFormat`1.GetMediaType(`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.FileFormat`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.IXmlDocumentFormat">
            <summary>
            Represents an instance of <see cref="T:IS4.SFI.Formats.IFileFormat"/> for a format
            based on XML.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat.GetPublicId(System.Object)">
            <summary>
            Returns the PUBLIC identifier of a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A PUBLIC identifier based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat.GetSystemId(System.Object)">
            <summary>
            Returns the SYSTEM identifier of a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A SYSTEM identifier based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat.GetNamespace(System.Object)">
            <summary>
            Returns the root element's namespace URI in a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>The namespace URI based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat.CheckDocument(System.Xml.Linq.XDocumentType,System.Xml.XmlReader)">
            <summary>
            Determines whether an XML document identified using a
            particular DTD and root element could
            be in a format represented by this instance.
            </summary>
            <param name="docType">The DTD of the document.</param>
            <param name="rootReader">
            An instance of a <see cref="T:System.Xml.XmlReader"/>
            pointing at the root element. This instance
            is not expected to be modified.
            </param>
            <returns></returns>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat.Match``2(System.Xml.XmlReader,System.Xml.Linq.XDocumentType,IS4.SFI.Formats.MatchContext,IS4.SFI.IResultFactory{``0,``1},``1)">
            <summary>
            Attempts to match this format from an XML document, producing
            an object that describes the media object stored in the file.
            The object is obtained using the provided <see cref="T:IS4.SFI.IResultFactory`2"/>.
            </summary>
            <typeparam name="TResult">User-specified result type passed to <paramref name="resultFactory"/>.</typeparam>
            <typeparam name="TArgs">User-specified arguments type passed to <paramref name="resultFactory"/>.</typeparam>
            <param name="reader">
            An instance of <see cref="T:System.Xml.XmlReader"/> that can read the whole document.
            The reader is pointed right before the root element.
            </param>
            <param name="docType">The DTD of the document.</param>
            <param name="context">Additional information relevant to the match.</param>
            <param name="resultFactory">A receiver object that is provided the result of the match, if any.</param>
            <param name="args">User-specified arguments passed to <paramref name="resultFactory"/>.</param>
            <returns>
            The result of <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/> when given the produced object,
            or the default value of <typeparamref name="TResult"/> when the match isn't successful.
            </returns>
            <exception cref="T:System.Exception">
            Any exception may be caused during the internal parsing of the format.
            </exception>
        </member>
        <member name="T:IS4.SFI.Formats.IXmlDocumentFormat`1">
            <summary>
            Represents an instance of <see cref="T:IS4.SFI.Formats.IFileFormat`1"/> for a format
            based on XML, producing instances of <typeparamref name="T"/>
            to describe the media object.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat`1.GetPublicId(`0)">
            <summary>
            Returns the PUBLIC identifier of a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A PUBLIC identifier based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat`1.GetSystemId(`0)">
            <summary>
            Returns the SYSTEM identifier of a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>A SYSTEM identifier based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat`1.GetNamespace(`0)">
            <summary>
            Returns the root element's namespace URI in a document describing an instance of this formats.
            </summary>
            <param name="value">An object compatible with this format.</param>
            <returns>The namespace URI based on <paramref name="value"/>.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown if the argument is not compatible with the format.
            </exception>
        </member>
        <member name="M:IS4.SFI.Formats.IXmlDocumentFormat`1.Match``2(System.Xml.XmlReader,System.Xml.Linq.XDocumentType,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{`0,``0,``1},``1)">
            <summary>
            Attempts to match this format from an XML document, producing
            an object that describes the media object stored in the file.
            The object is obtained using the provided <see cref="T:IS4.SFI.IResultFactory`2"/>.
            </summary>
            <typeparam name="TResult">User-specified result type passed to <paramref name="resultFactory"/>.</typeparam>
            <typeparam name="TArgs">User-specified arguments type passed to <paramref name="resultFactory"/>.</typeparam>
            <param name="reader">
            An instance of <see cref="T:System.Xml.XmlReader"/> that can read the whole document.
            The reader is pointed right before the root element.
            </param>
            <param name="docType">The DTD of the document.</param>
            <param name="context">Additional information relevant to the match.</param>
            <param name="resultFactory">A receiver object that is provided the result of the match, if any.</param>
            <param name="args">User-specified arguments passed to <paramref name="resultFactory"/>.</param>
            <returns>
            The result of <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/> when given the produced object,
            or the default value of <typeparamref name="TResult"/> when the match isn't successful.
            </returns>
            <exception cref="T:System.Exception">
            Any exception may be caused during the internal parsing of the format.
            </exception>
        </member>
        <member name="T:IS4.SFI.Formats.XmlDocumentFormat`1">
            <summary>
            Provides a base implementation of <see cref="T:IS4.SFI.Formats.IXmlDocumentFormat`1"/>.
            </summary>
            <typeparam name="T">
            The type of the instances produced as a result
            of parsing the format.
            </typeparam>
        </member>
        <member name="P:IS4.SFI.Formats.XmlDocumentFormat`1.PublicId">
            <summary>
            The common PUBLIC identifier, used if there is no other implementation
            of <see cref="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetPublicId(`0)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.XmlDocumentFormat`1.SystemId">
            <summary>
            The common SYSTEM identifier, used if there is no other implementation
            of <see cref="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetSystemId(`0)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.XmlDocumentFormat`1.Namespace">
            <summary>
            The common SYSTEM identifier, used if there is no other implementation
            of <see cref="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetSystemId(`0)"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.#ctor(System.String,System.String,System.Uri,System.String,System.String)">
            <param name="publicId">The value of <see cref="P:IS4.SFI.Formats.XmlDocumentFormat`1.PublicId"/>.</param>
            <param name="systemId">The value of <see cref="P:IS4.SFI.Formats.XmlDocumentFormat`1.SystemId"/>.</param>
            <param name="namespace">The value of <see cref="P:IS4.SFI.Formats.XmlDocumentFormat`1.Namespace"/>.</param>
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.CheckDocument(System.Xml.Linq.XDocumentType,System.Xml.XmlReader)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.Match``2(System.Xml.XmlReader,System.Xml.Linq.XDocumentType,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{`0,``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.Match``2(System.Xml.XmlReader,System.Xml.Linq.XDocumentType,IS4.SFI.Formats.MatchContext,IS4.SFI.IResultFactory{``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetPublicId(`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetSystemId(`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlDocumentFormat`1.GetNamespace(`0)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.MatchContext">
            <summary>
            Stores additional parameters relevant when matching formats.
            The parameters are stored as services implementing specific
            interfaces, retrievable via <see cref="M:IS4.SFI.Formats.MatchContext.GetService``1"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.MatchContext.#ctor(System.Object)">
            <summary>
            Creates a new instance from an object and its base or implemented types.
            </summary>
            <param name="services">The object to use as a basis for the services.</param>
        </member>
        <member name="M:IS4.SFI.Formats.MatchContext.GetService``1">
            <summary>
            Attempts to retrieve a service based on its type,
            provided via <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the service to retrieve.</typeparam>
            <returns>
            An instance of <typeparamref name="T"/>,
            if stored in the context, or <see langword="null"/> otherwise.
            </returns>
        </member>
        <member name="M:IS4.SFI.Formats.MatchContext.WithService``1(``0)">
            <summary>
            Adds a new service to the collection of existing ones,
            based on its type <typeparamref name="T"/>,
            and returns a new instance of <see cref="T:IS4.SFI.Formats.MatchContext"/>
            with the updated collection of services.
            </summary>
            <typeparam name="T">The type implemented by the service.</typeparam>
            <param name="service">The implementing service.</param>
            <returns>A new context with the service.</returns>
        </member>
        <member name="M:IS4.SFI.Formats.MatchContext.WithServices(System.Object)">
            <summary>
            Adds a new service to the collection of existing ones,
            based on all types of <paramref name="services"/>,
            and returns a new instance of <see cref="T:IS4.SFI.Formats.MatchContext"/>
            with the updated collection of services.
            </summary>
            <param name="services">The implementing service.</param>
            <returns>A new context with the service.</returns>
        </member>
        <member name="T:IS4.SFI.Formats.SignatureFormat`1">
            <summary>
            An extension of <see cref="T:IS4.SFI.Formats.BinaryFileFormat`1"/> for formats identified
            using sequence of bytes at the start of the data, i.e. a signature.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the format from an empty signature.
            </summary>
            <param name="headerLength">The minimum required length of the header.</param>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the format from a <see cref="T:System.String"/> signature.
            </summary>
            <param name="headerLength">The minimum required length of the header.</param>
            <param name="signature">A string representation of the signature, converted to ASCII.</param>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.#ctor(System.Int32,System.Byte[],System.String,System.String)">
            <summary>
            Creates a new instance of the format from a <see cref="T:System.Byte"/> array signature.
            </summary>
            <param name="headerLength">The minimum required length of the header.</param>
            <param name="signature">The raw bytes of the signature.</param>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the format from a <see cref="T:System.String"/> signature.
            </summary>
            <param name="signature">A string representation of the signature, converted to ASCII.</param>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Creates a new instance of the format from a <see cref="T:System.Byte"/> array signature.
            </summary>
            <param name="signature">The raw bytes of the signature.</param>
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
            <param name="extension"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='extension']"/></param>
            <param name="mediaType"><inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)" path="/param[@name='mediaType']"/></param>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.SignatureFormat`1.CheckSignature(System.ReadOnlySpan{System.Byte})">
            <summary>
            In the default implementation, checks that the sequence of bytes
            provided in <paramref name="header"/> is longer than the signature
            stored by the format and starts with it.
            </summary>
            <param name="header">A collection of bytes from the beginning of the file.</param>
            <returns><see langword="true"/> if the signature in the header matches.</returns>
        </member>
        <member name="T:IS4.SFI.Formats.X509CertificateFormat">
            <summary>
            A format representing X.509 certificates, as instances of
            <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>. All known certificate types
            can be loaded from files, with the exception of
            <see cref="F:System.Security.Cryptography.X509Certificates.X509ContentType.Authenticode"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Formats.X509CertificateFormat.storedTypes">
            <summary>
            The certificate itself does not remember the format it was loaded from,
            so we have to store its <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType"/> here.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.X509CertificateFormat.#ctor">
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:IS4.SFI.Formats.X509CertificateFormat.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.X509CertificateFormat.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{System.Security.Cryptography.X509Certificates.X509Certificate2,``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.X509CertificateFormat.GetMediaType(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.X509CertificateFormat.GetExtension(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.XmlFileFormat">
            <summary>
            Represents the XML file format, producing instances of <see cref="T:System.Xml.XmlReader"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.XmlFileFormat.ReaderSettings">
            <summary>
            The default settings used with <see cref="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)"/>.
            The updated values are the following:
            <list type="bullet">
            <item>
                <term><see cref="P:System.Xml.XmlReaderSettings.CloseInput"/></term>
                <description><see langword="false"/></description>
            </item>
            <item>
                <term><see cref="P:System.Xml.XmlReaderSettings.DtdProcessing"/></term>
                <description><see cref="F:System.Xml.DtdProcessing.Parse"/></description>
            </item>
            <item>
                <term><see cref="P:System.Xml.XmlReaderSettings.ValidationType"/></term>
                <description><see cref="F:System.Xml.ValidationType.None"/></description>
            </item>
            <item>
                <term><see cref="P:System.Xml.XmlReaderSettings.Async"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Xml.XmlReaderSettings.XmlResolver"/></term>
                <description>A custom resolver which does not open any external resources.</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.XmlFileFormat.#ctor(System.String,System.String)">
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlFileFormat.CheckHeader(System.ReadOnlySpan{System.Byte},System.Boolean,IS4.SFI.Services.IEncodingDetector)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Formats.XmlFileFormat.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{System.Xml.XmlReader,``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.ZipFileFormat">
            <summary>
            Represents the ZIP archive format, creating an instance of <see cref="T:System.IO.Compression.ZipArchive"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.ZipFileFormat.#ctor">
            <inheritdoc cref="M:IS4.SFI.Formats.FileFormat`1.#ctor(System.String,System.String)"/>
        </member>
        <member name="M:IS4.SFI.Formats.ZipFileFormat.Match``2(System.IO.Stream,IS4.SFI.Formats.MatchContext,IS4.SFI.ResultFactory{System.IO.Compression.ZipArchive,``0,``1},``1)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Formats.IArchiveInfo">
            <summary>
            A general representation of an archive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IArchiveInfo.IsComplete">
            <summary>
            <see langword="true"/> if the archive is complete, i.e. there are no following parts.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IArchiveInfo.IsSolid">
            <summary>
            <see langword="true"/> if the files in the archive are compressed as one single block.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.IArchiveFile">
            <summary>
            Represents a browsable archive in memory.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IArchiveFile.Entries">
            <summary>
            Contains the collection of all entries in the archive,
            as instances of <see cref="T:IS4.SFI.Formats.IArchiveEntry"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.IArchiveReader">
            <summary>
            Represents an archive that can be only read once, as an
            <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IArchiveReader.Skip">
            <summary>
            Skips the current entry in the archive, without reading it.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.IArchiveEntry">
            <summary>
            Represents an entry in an archive, usually also either
            a <see cref="T:IS4.SFI.Services.IFileInfo"/> or <see cref="T:IS4.SFI.Services.IDirectoryInfo"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IArchiveEntry.ArchivedTime">
            <summary>
            The date and time when the file was archived, if present.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.ICabinetArchive">
            <summary>
            Represents a Cabinet (CAB) archive for implementations compatible with
            the WinAPI functions for reading Cabinet files. The instance
            acts as a reader.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.ICabinetArchive.GetNextFile">
            <summary>
            Returns the next file in the archive.
            </summary>
            <returns>
            An instance of <see cref="T:IS4.SFI.Formats.ICabinetArchiveFile"/> identifying the next file,
            or <see langword="null"/> if the archive is at the end.
            </returns>
        </member>
        <member name="T:IS4.SFI.Formats.ICabinetArchiveFile">
            <summary>
            Stores the properties of a file in a Cabinet archive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICabinetArchiveFile.Name">
            <summary>
            The name/path of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICabinetArchiveFile.Stream">
            <summary>
            The stream that can be used to read the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICabinetArchiveFile.Date">
            <summary>
            The modification date and time of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICabinetArchiveFile.Size">
            <summary>
            The size of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICabinetArchiveFile.Attributes">
            <summary>
            Additional attributes of the file.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.ICustomWaveFormat">
            <summary>
            Stores the description of an audio format.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.SampleRate">
            <summary>
            The sample rate of the audio in Hz.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.ChannelCount">
            <summary>
            The number of channels in the audio.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.BitsPerSample">
            <summary>
            The bit depth of the audio.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.AverageBytesPerSecond">
            <summary>
            Average bitrate, in B/s.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.MajorType">
            <summary>
            The <see cref="T:System.Guid"/> that specifies the major type of the media sample,
            see https://docs.microsoft.com/en-us/windows/win32/directshow/media-types.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.ICustomWaveFormat.SubType">
            <summary>
            The <see cref="T:System.Guid"/> that specifies the subtype of the media sample,
            see https://docs.microsoft.com/en-us/windows/win32/directshow/media-types.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.IModule">
            <summary>
            Represents a general module with executable code.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModule.Type">
            <summary>
            The type of the module, as one of the values in <see cref="T:IS4.SFI.Formats.ModuleType"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IModule.ReadResources">
            <summary>
            Opens the list of resources in the module and returns them
            as a collection of <see cref="T:IS4.SFI.Formats.IModuleResource"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:IS4.SFI.Formats.IModule.Signature">
            <summary>
            The cryptographic signature of the module.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.ModuleType">
            <summary>
            The type of a module.
            </summary>
        </member>
        <member name="F:IS4.SFI.Formats.ModuleType.Unknown">
            <summary>
            The type is not known/recognized.
            </summary>
        </member>
        <member name="F:IS4.SFI.Formats.ModuleType.Executable">
            <summary>
            The module is an executable, i.e. it has an entry point that can be
            run on its own.
            </summary>
        </member>
        <member name="F:IS4.SFI.Formats.ModuleType.Library">
            <summary>
            The module is a library, containing a collection of externally
            available functions or resources.
            </summary>
        </member>
        <member name="F:IS4.SFI.Formats.ModuleType.System">
            <summary>
            The module is a system file, driver etc.
            </summary>
        </member>
        <member name="T:IS4.SFI.Formats.IModuleResource">
            <summary>
            Represents a resource in <see cref="T:IS4.SFI.Formats.IModule"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleResource.Type">
            <summary>
            The type of the resource, usually as <see cref="T:System.String"/>
            or <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleResource.Name">
            <summary>
            The name of the resource, usually as <see cref="T:System.String"/>
            or <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleResource.Length">
            <summary>
            The length of the resource in bytes.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IModuleResource.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the whole resource into an array buffer.
            </summary>
            <param name="buffer">The buffer to receive the resource data.</param>
            <param name="offset">The offset where to read the data.</param>
            <param name="length">The maximum length of data to read.</param>
            <returns>The number of bytes read from the resource.</returns>
        </member>
        <member name="T:IS4.SFI.Formats.IModuleSignature">
            <summary>
            Represents a cryptographically-signed part of a module.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleSignature.Hash">
            <summary>
            The hash present in the signature.
            </summary>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleSignature.HashAlgorithm">
            <summary>
            The built-in hash algorithm used to produce <see cref="P:IS4.SFI.Formats.IModuleSignature.Hash"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Formats.IModuleSignature.ComputeHash(IS4.SFI.Tools.BuiltInHash)">
            <summary>
            Computes a hash from the module using the provided built-in hash algorithm.
            </summary>
            <param name="hash">An instance of <see cref="T:IS4.SFI.Tools.BuiltInHash"/> to use.</param>
            <returns>The result of the hashing.</returns>
        </member>
        <member name="P:IS4.SFI.Formats.IModuleSignature.Certificate">
            <summary>
            The signing X.509 certificate.
            </summary>
        </member>
        <member name="T:IS4.SFI.GlobalOptions">
            <summary>
            Global properties affecting the application.
            </summary>
        </member>
        <member name="P:IS4.SFI.GlobalOptions.SuppressNonCriticalExceptions">
            <summary>
            Whether to ignore recoverable exceptions; by default the exceptions
            are not ignored only when <see cref="P:System.Diagnostics.Debugger.IsAttached"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.InternalApplicationException">
            <summary>
            Stores an exception in <see cref="P:System.Exception.InnerException"/> that
            should not be suppressed when the situation would normally be recoverable
            (such as when a format cannot be matched), indicating that a failure
            occured within the application itself.
            </summary>
        </member>
        <member name="M:IS4.SFI.InternalApplicationException.#ctor(System.Exception)">
            <inheritdoc cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:IS4.SFI.InternalApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.IResultFactory`2">
            <summary>
            Represents a "generic" version of <see cref="T:IS4.SFI.ResultFactory`3"/>
            where the type of the first argument of <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/>
            is provided by the invoking code. When <typeparamref name="TResult"/> or
            <typeparamref name="TArgs"/> should be empty, using <see cref="T:System.ValueTuple"/>
            is recommended.
            </summary>
            <typeparam name="TResult">The implementer-defined type of the value returned by <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/>.</typeparam>
            <typeparam name="TArgs">The implementer-defined type of the arguments used by <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/>.</typeparam>
        </member>
        <member name="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)">
            <summary>
            Invokes the delegate, passing the produced object.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The produced object.</param>
            <param name="args">Custom arguments passed to the method.</param>
            <returns>The result of the method.</returns>
        </member>
        <member name="T:IS4.SFI.ResultFactory`3">
            <summary>
            A general delegate receiving a result of an operation, alongside user-provided
            arguments, intended to return a custom value to the outside code.
            <typeparamref name="TArgs"/> should be empty, using <see cref="T:System.ValueTuple"/>
            is recommended.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <typeparam name="TResult">The implementer-defined type of the value returned when invoked.</typeparam>
            <typeparam name="TArgs">The implementer-defined type of the arguments used when invoked.</typeparam>
            <param name="value">The produced object.</param>
            <param name="args">Custom arguments passed to the method.</param>
            <returns>The result of the method.</returns>
        </member>
        <member name="T:IS4.SFI.ReferenceEqualityComparer`1">
            <summary>
            Compares two instances of <typeparamref name="T"/> based on their reference
            equality, i.e. their identity, disregarding any potential overridden
            implementations of <see cref="M:System.Object.Equals(System.Object)"/> or
            <see cref="M:System.Object.GetHashCode"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:IS4.SFI.ReferenceEqualityComparer`1.Default">
            <summary>
            The default instance of the comparer.
            </summary>
        </member>
        <member name="M:IS4.SFI.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IContainerAnalyzerProvider">
            <summary>
            Produces an instance of <see cref="T:IS4.SFI.Services.IContainerAnalyzer"/> from the root
            of a container encountered during analysis.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IContainerAnalyzerProvider.MatchRoot``1(``0,IS4.SFI.Services.AnalysisContext)">
            <summary>
            Attempts to match an object as a root of the container hierarchy.
            </summary>
            <typeparam name="TRoot">The type of <paramref name="root"/>.</typeparam>
            <param name="root">The root of the hierarchy, of an arbitrary type.</param>
            <param name="context">Additional context of the analysis.</param>
            <returns>
            An instance of <see cref="T:IS4.SFI.Services.IContainerAnalyzer"/> if the root is
            recognized, null otherwise.
            </returns>
        </member>
        <member name="T:IS4.SFI.Services.IContainerAnalyzerProvider`1">
            <typeparam name="TRoot">The root object type recognized by the provider.</typeparam>
            <inheritdoc cref="T:IS4.SFI.Services.IContainerAnalyzerProvider"/>
        </member>
        <member name="M:IS4.SFI.Services.IContainerAnalyzerProvider`1.MatchRoot(`0,IS4.SFI.Services.AnalysisContext)">
            <inheritdoc cref="M:IS4.SFI.Services.IContainerAnalyzerProvider.MatchRoot``1(``0,IS4.SFI.Services.AnalysisContext)"/>
        </member>
        <member name="T:IS4.SFI.Services.AnalyzeInner">
            <summary>
            The delegate provided to <see cref="M:IS4.SFI.Services.IContainerAnalyzer.Analyze``2(``0,``1,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.AnalyzeInner,IS4.SFI.Services.IEntityAnalyzers)"/>
            and <see cref="M:IS4.SFI.Services.IContainerAnalyzer`2.Analyze(`0,`1,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.AnalyzeInner,IS4.SFI.Services.IEntityAnalyzers)"/>
            that is called to execute the inner analyzers for the entity and instruct
            the provider how to process other nodes or analyzers.
            </summary>
            <param name="behaviour">The requested behaviour of the analysis in relation to other analyzers or nodes.</param>
            <returns>The result of the inner analysis.</returns>
        </member>
        <member name="T:IS4.SFI.Services.ContainerBehaviour">
            <summary>
            Specifies the flags provided via <see cref="T:IS4.SFI.Services.AnalyzeInner"/>
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.ContainerBehaviour.None">
            <summary>
            No specific behaviour of the analysis.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.ContainerBehaviour.FollowChildren">
            <summary>
            Indicates that children nodes of the current node should be followed
            by the current analyzer.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.ContainerBehaviour.BlockOther">
            <summary>
            Indicates that multiple instances of this analyzer type should not
            enter this node, i.e. that the instance of <see cref="T:IS4.SFI.Services.IContainerAnalyzerProvider"/>
            that was used to obtain this analyzer should not be used when matching this node
            as a root.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IContainerAnalyzer">
            <summary>
            Represents an object returned from <see cref="M:IS4.SFI.Services.IContainerAnalyzerProvider.MatchRoot``1(``0,IS4.SFI.Services.AnalysisContext)"/>
            capable of analyzing a node in a hierarchy and traversing its path to the root.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IContainerAnalyzer.Analyze``2(``0,``1,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.AnalyzeInner,IS4.SFI.Services.IEntityAnalyzers)">
            <summary>
            Analyzes an entity in a hierarchy, similarly to <see cref="M:IS4.SFI.Services.IEntityAnalyzer`1.Analyze(`0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)"/>.
            </summary>
            <typeparam name="TParent">The type of the parent node, implementing <see cref="T:IS4.SFI.Services.IContainerNode"/>.</typeparam>
            <typeparam name="TEntity">The type of <paramref name="entity"/>.</typeparam>
            <param name="parentNode">The parent node of <paramref name="entity"/>.</param>
            <param name="entity">The entity to analyze.</param>
            <param name="inner">
            A delegate which should be called by the implementation to execute other analyzers of perform the base analysis.
            </param>
            <param name="analyzers"><inheritdoc cref="M:IS4.SFI.Services.IEntityAnalyzer`1.Analyze(`0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)" path="/param[@name='analyzers']"/></param>
            <param name="context"><inheritdoc cref="M:IS4.SFI.Services.IEntityAnalyzer`1.Analyze(`0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)" path="/param[@name='context']"/></param>
        </member>
        <member name="T:IS4.SFI.Services.IContainerAnalyzer`2">
            <typeparam name="TParent">The type of the parent node, implementing <see cref="T:IS4.SFI.Services.IContainerNode"/>.</typeparam>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <inheritdoc cref="T:IS4.SFI.Services.IContainerAnalyzer"/>
        </member>
        <member name="M:IS4.SFI.Services.IContainerAnalyzer`2.Analyze(`0,`1,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.AnalyzeInner,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc cref="M:IS4.SFI.Services.IContainerAnalyzer.Analyze``2(``0,``1,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.AnalyzeInner,IS4.SFI.Services.IEntityAnalyzers)"/>
        </member>
        <member name="T:IS4.SFI.Services.IContainerNode">
            <summary>
            Represents a node in a container hierarchy.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IContainerNode.ParentNode">
            <summary>
            The parent of the current node.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IContainerNode.Value">
            <summary>
            The value of the current node.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IContainerNode`2">
            <typeparam name="TValue">The type of <see cref="P:IS4.SFI.Services.IContainerNode`2.Value"/>.</typeparam>
            <typeparam name="TParent">The type of <see cref="P:IS4.SFI.Services.IContainerNode`2.ParentNode"/>, implementing <see cref="T:IS4.SFI.Services.IContainerNode"/>.</typeparam>
            <inheritdoc cref="T:IS4.SFI.Services.IContainerNode"/>
        </member>
        <member name="P:IS4.SFI.Services.IContainerNode`2.ParentNode">
            <inheritdoc cref="P:IS4.SFI.Services.IContainerNode.ParentNode"/>
        </member>
        <member name="P:IS4.SFI.Services.IContainerNode`2.Value">
            <inheritdoc cref="P:IS4.SFI.Services.IContainerNode.Value"/>
        </member>
        <member name="T:IS4.SFI.Services.IDataObject">
            <summary>
            Stores the information obtained during data analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.IsBinary">
            <summary>
            The the data is binary, i.e. not textual.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.Source">
            <summary>
            The original entity that was used to read the data from.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.StreamFactory">
            <summary>
            A factory of seekable streams that can be used to read the data.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.ActualLength">
            <summary>
            The actual number of bytes read from <see cref="P:IS4.SFI.Services.IDataObject.Source"/>
            (may be different from <see cref="P:IS4.SFI.Services.IStreamFactory.Length"/>).
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.Hashes">
            <summary>
            The mapping of hashes and their values as computed during
            analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.Formats">
            <summary>
            The collection of recognized format objects and the results of the analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.IsPlain">
            <summary>
            Indicates whether the data is marked as not containing any structured data.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.ByteValue">
            <summary>
            The byte content of the data, possibly only an
            initial portion if <see cref="P:IS4.SFI.Services.IDataObject.IsComplete"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.StringValue">
            <summary>
            The string content of the data, possibly only an
            initial portion if <see cref="P:IS4.SFI.Services.IDataObject.IsComplete"/> is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.Charset">
            <summary>
            The recognized charset of the text.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.Encoding">
            <summary>
            The encoding used to produce <see cref="P:IS4.SFI.Services.IDataObject.StringValue"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDataObject.IsComplete">
            <summary>
            Whether <see cref="P:IS4.SFI.Services.IDataObject.ByteValue"/> and <see cref="P:IS4.SFI.Services.IDataObject.StringValue"/>
            describe the whole data, or only its beginning.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IDirectoryInfo">
            <summary>
            Represents a concrete directory in a file system.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDirectoryInfo.Entries">
            <summary>
            Contains the collection of all files and directories
            in this directory.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDirectoryInfo.SpecialFolderType">
            <summary>
            The type of the folder, as a value from <see cref="T:System.Environment.SpecialFolder"/>
            or <see cref="T:IS4.SFI.Services.VirtualFolders"/>, if applicable.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.VirtualFolders">
            <summary>
            Additional values of <see cref="T:System.Environment.SpecialFolder"/> for
            virtual folders, usable in <see cref="P:IS4.SFI.Services.IDirectoryInfo.SpecialFolderType"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.InternetExplorer">
            <summary>
            A virtual folder for Internet Explorer.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.ControlPanel">
            <summary>
            The virtual folder that contains icons for the Control Panel applications.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.Printers">
            <summary>
            The virtual folder that contains installed printers.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.RecycleBin">
            <summary>
            The virtual folder that contains the objects in the user's Recycle Bin.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.NetworkNeighborhood">
            <summary>
            A virtual folder that represents Network Neighborhood, the root of the network namespace hierarchy.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.VirtualFolders.NetworkConnections">
            <summary>
            The virtual folder that represents Network Connections, that contains network and dial-up connections.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.DirectoryInfoWrapper">
            <summary>
            Wraps a <see cref="T:System.IO.DirectoryInfo"/> instance.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.DirectoryInfoWrapper.#ctor(System.IO.DirectoryInfo,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DirectoryInfoWrapper.Entries">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DirectoryInfoWrapper.SpecialFolderType">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IDriveInfo">
            <summary>
            Represents a directory that is also a logical drive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.DriveFormat">
            <summary>
            The format of the drive, e.g. NTFS or FAT32.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.DriveType">
            <summary>
            The type of the drive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.TotalFreeSpace">
            <summary>
            The number of bytes of remaining space on the drive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.OccupiedSpace">
            <summary>
            The number of bytes occupied by data on the drive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.TotalSize">
            <summary>
            The total number of bytes on the drive.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IDriveInfo.VolumeLabel">
            <summary>
            The drive label.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.RootDirectoryInfo">
            <summary>
            An abstract class to use for the directory representing
            the root of a file system.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Entries">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Name">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.SubName">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Path">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Revision">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.CreationTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.LastWriteTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.LastAccessTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Kind">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.SpecialFolderType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.DriveFormat">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.DriveType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.TotalFreeSpace">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.OccupiedSpace">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.TotalSize">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.VolumeLabel">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.ReferenceKey">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.RootDirectoryInfo.DataKey">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.RootDirectoryInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.DriveInfoWrapper">
            <summary>
            Wraps a <see cref="T:System.IO.DriveInfo"/> instance.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.DriveInfo">
            <summary>
            The underlying <see cref="T:System.IO.DriveInfo"/> instance.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.DriveInfoWrapper.#ctor(System.IO.DriveInfo,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.DriveFormat">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.DriveType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.TotalFreeSpace">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.OccupiedSpace">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.TotalSize">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.DriveInfoWrapper.VolumeLabel">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IEncodingDetector">
            <summary>
            The common interface used by a detector of an input file's charset.
            Once initialized, the instance shall receive consecutive chunks of the
            input data via <see cref="M:IS4.SFI.Services.IEncodingDetector.Write(System.ArraySegment{System.Byte})"/> or
            <see cref="M:IS4.SFI.Services.IEncodingDetector.Write(System.ReadOnlySpan{System.Byte})"/> until its and, signalized
            by calling <see cref="M:IS4.SFI.Services.IEncodingDetector.End"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IEncodingDetector.Charset">
            <summary>
            The recognized character set. May not be set before a call to <see cref="M:IS4.SFI.Services.IEncodingDetector.End"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IEncodingDetector.Confidence">
            <summary>
            The confidence of the resulting <see cref="P:IS4.SFI.Services.IEncodingDetector.Charset"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IEncodingDetector.Write(System.ArraySegment{System.Byte})">
            <summary>
            Gives additional data to the detector.
            </summary>
            <param name="data">The next collection of bytes of the data.</param>
        </member>
        <member name="M:IS4.SFI.Services.IEncodingDetector.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gives additional data to the detector.
            </summary>
            <param name="data">The next collection of bytes of the data.</param>
        </member>
        <member name="M:IS4.SFI.Services.IEncodingDetector.End">
            <summary>
            Indicates that the data is at its end.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IEntityAnalyzers">
            <summary>
            Supports analysis of arbitrary entities. It usually stores
            a collection of <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> to query
            with the concrete type of the entity.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IEntityAnalyzers.Analyze``1(``0,IS4.SFI.Services.AnalysisContext)">
            <summary>
            Analyzes <paramref name="entity"/> of an arbitrary type.
            </summary>
            <typeparam name="T">The type of <paramref name="entity"/>.</typeparam>
            <param name="entity">The entity to analyze.</param>
            <param name="context">An instance of <see cref="T:IS4.SFI.Services.AnalysisContext"/> to provide additional parameters.</param>
            <returns>
            The result of the analysis, or the default value of <see cref="T:IS4.SFI.Services.AnalysisResult"/>
            if it was not successful.
            </returns>
        </member>
        <member name="T:IS4.SFI.Services.IEntityAnalyzer`1">
            <summary>
            Supports analysis of entities of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The supported type of the entity.</typeparam>
        </member>
        <member name="M:IS4.SFI.Services.IEntityAnalyzer`1.Analyze(`0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <summary>
            Analyzes <paramref name="entity"/>.
            </summary>
            <param name="entity">The entity to analyze.</param>
            <param name="context">An instance of <see cref="T:IS4.SFI.Services.AnalysisContext"/> to provide additional parameters.</param>
            <param name="analyzers">The collection of analyzers to use for inner entities.</param>
            <returns>
            The result of the analysis, or the default value of <see cref="T:IS4.SFI.Services.AnalysisResult"/>
            if it was not successful.
            </returns>
        </member>
        <member name="T:IS4.SFI.Services.AnalysisContext">
            <summary>
            Additional state used during analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.Parent">
            <summary>
            The parent node logically containing the analyzed entity.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.Node">
            <summary>
            The node logically corresponding to the analyzed entity.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.Initialized">
            <summary>
            <see langword="true"/> if <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/> was already initialized (i.e.
            by calling <see cref="M:IS4.SFI.Services.ILinkedNode.SetClass(IS4.SFI.Vocabulary.ClassUri)"/>)
            and it is not necessary to initialize it again.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.NodeFactory">
            <summary>
            The factory that is used to produce instances of <see cref="T:IS4.SFI.Services.ILinkedNode"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.MatchContext">
            <summary>
            Additional context used when matching formats.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisContext.Depth">
            <summary>
            The nesting depth of the analysis.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.#ctor(IS4.SFI.Services.ILinkedNodeFactory,IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.ILinkedNode,System.Boolean,IS4.SFI.Formats.MatchContext,System.Int32)">
            <summary>
            Creates a new instance of the context.
            </summary>
            <param name="parent">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/>.</param>
            <param name="node">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>.</param>
            <param name="initialized">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Initialized"/>.</param>
            <param name="nodeFactory">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>.</param>
            <param name="matchContext">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.MatchContext"/>.</param>
            <param name="depth">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Depth"/>.</param>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.Create(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.ILinkedNodeFactory)">
            <summary>
            Creates a new instance of <see cref="T:IS4.SFI.Services.AnalysisContext"/> starting from a particular
            node and an instance of <see cref="T:IS4.SFI.Services.ILinkedNodeFactory"/>.
            </summary>
            <param name="node">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>.</param>
            <param name="nodeFactory">The value of <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>.</param>
            <returns>A new instance with the specified objects.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.WithParent(IS4.SFI.Services.ILinkedNode)">
            <summary>
            Creates a new context, keeping the <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>
            and <see cref="P:IS4.SFI.Services.AnalysisContext.MatchContext"/>.
            </summary>
            <param name="parent">The new value of <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/>.</param>
            <returns>The updated context.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.WithNode(IS4.SFI.Services.ILinkedNode)">
            <summary>
            Creates a new context, keeping the <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>
            and <see cref="P:IS4.SFI.Services.AnalysisContext.MatchContext"/>.
            The <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/> property also preserved,
            unless <paramref name="node"/> is different from <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>
            and both are non-<see langword="null"/>.
            </summary>
            <param name="node">The new value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>.</param>
            <returns>The updated context.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.WithMatchContext(IS4.SFI.Formats.MatchContext)">
            <summary>
            Creates a new context, keeping the <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/>,
            <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>, and <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>.
            </summary>
            <param name="matchContext">The new value of <see cref="P:IS4.SFI.Services.AnalysisContext.MatchContext"/>.</param>
            <returns>The updated context.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.WithMatchContext(System.Func{IS4.SFI.Formats.MatchContext,IS4.SFI.Formats.MatchContext})">
            <summary>
            Creates a new context, keeping the <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/>,
            <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>, and <see cref="P:IS4.SFI.Services.AnalysisContext.NodeFactory"/>.
            </summary>
            <param name="matchContextTransform">
            A function which receives the old value of <see cref="P:IS4.SFI.Services.AnalysisContext.MatchContext"/>
            and produces a new one to use.
            </param>
            <returns>The updated context.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisContext.AsInitialized">
            <summary>
            Creates a new context, keeping all properties but setting
            <see cref="P:IS4.SFI.Services.AnalysisContext.Initialized"/> to <see langword="true"/>.
            </summary>
            <returns>The updated context.</returns>
        </member>
        <member name="T:IS4.SFI.Services.AnalysisResult">
            <summary>
            Stores the result of an analysis.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisResult.Node">
            <summary>
            The instance of <see cref="T:IS4.SFI.Services.ILinkedNode"/> that was created or used for the
            analyzed entity. Could be <see langword="null"/> if the analysis was not
            successful.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisResult.Label">
            <summary>
            A human-readable label storing additional information about the entity.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AnalysisResult.Exception">
            <summary>
            Stores an exception that might have occurred during the analysis,
            possibly as an <see cref="T:System.AggregateException"/> if there were
            multiple exceptions.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.AnalysisResult.#ctor(IS4.SFI.Services.ILinkedNode,System.String,System.Exception)">
            <summary>
            Creates a new instance of the result.
            </summary>
            <param name="node">The value of <see cref="P:IS4.SFI.Services.AnalysisResult.Node"/>.</param>
            <param name="label">The value of <see cref="P:IS4.SFI.Services.AnalysisResult.Label"/>.</param>
            <param name="exception">The value of <see cref="P:IS4.SFI.Services.AnalysisResult.Exception"/>.</param>
        </member>
        <member name="T:IS4.SFI.Services.EntityAnalyzer">
            <summary>
            A base implementation of an analyzer, containing useful
            functions for obtaining and initializing the node.
            It is still necessary to implement the concrete
            <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> type.
            </summary>
        </member>
        <member name="E:IS4.SFI.Services.EntityAnalyzer.OutputFile">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.EntityAnalyzer.OnOutputFile">
            <summary>
            Retrieves the <see cref="E:IS4.SFI.Services.EntityAnalyzer.OutputFile"/> event caller.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.#ctor">
            <summary>
            Creates a new instance of the analyzer.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.AnalysisContext)">
            <summary>
            Obtains or creates a new node from <see cref="T:IS4.SFI.Services.AnalysisContext"/>.
            </summary>
            <param name="context">The context to use.</param>
            <returns>
            The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>,
            or the result of <see cref="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateUnique(IS4.SFI.Services.ILinkedNodeFactory)"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.GetNode(System.String,IS4.SFI.Services.AnalysisContext)">
            <param name="subName">The name of the node relative to its parent.</param>
            <returns>
            The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>, the result of indexing
            <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/> with <paramref name="subName"/>,
            or the result of <see cref="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateUnique(IS4.SFI.Services.ILinkedNodeFactory)"/>.
            </returns>
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.AnalysisContext)"/>
            <param name="context"><inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.AnalysisContext)" path="/param[@name='context']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.IIndividualUriFormatter{System.Uri},IS4.SFI.Services.AnalysisContext)">
            <param name="formatter">The formatter to use to produce the node from its parent.</param>
            <returns>
            The value of <see cref="P:IS4.SFI.Services.AnalysisContext.Node"/>, the result of indexing
            <see cref="P:IS4.SFI.Services.AnalysisContext.Parent"/> with <paramref name="formatter"/>,
            or the result of <see cref="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateUnique(IS4.SFI.Services.ILinkedNodeFactory)"/>.
            </returns>
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.AnalysisContext)"/>
            <param name="context"><inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.GetNode(IS4.SFI.Services.AnalysisContext)" path="/param[@name='context']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.InitNode(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.AnalysisContext)">
            <summary>
            This method is called when a node is obtained for the entity,
            initializing its default properties (usually via
            <see cref="M:IS4.SFI.Services.ILinkedNode.SetClass(IS4.SFI.Vocabulary.ClassUri)"/>), unless
            <see cref="P:IS4.SFI.Services.AnalysisContext.Initialized"/> is set to <see langword="true"/>.
            The default implementation does nothing.
            </summary>
            <param name="node">The node to initialize.</param>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)">
            <summary>
            Ensures that an object has a valid value.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">The value of the object.</param>
            <param name="result">The variable that receives the value of the object.</param>
            <returns><see langword="true"/> if the value is valid.</returns>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(``0,``0@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.String,System.String@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.Int32,System.Int32@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.Int64,System.Int64@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.Single,System.Single@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.Double,System.Double@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer.IsDefined(System.DateTime,System.DateTime@)">
            <inheritdoc cref="M:IS4.SFI.Services.EntityAnalyzer.IsDefined``1(System.Nullable{``0},``0@)"/>
        </member>
        <member name="T:IS4.SFI.Services.EntityAnalyzer`1">
            <summary>
            An implementation of <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> where
            <typeparamref name="T"/> is the primary analyzable type.
            </summary>
            <typeparam name="T">The primary type of entities accepted by this analyzer.</typeparam>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer`1.Analyze(`0,IS4.SFI.Services.AnalysisContext,IS4.SFI.Services.IEntityAnalyzers)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.EntityAnalyzer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IFileInfo">
            <summary>
            Represents a concrete file in a file system.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.FileInfoWrapper">
            <summary>
            Wraps a <see cref="T:System.IO.FileInfo"/> instance.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.FileInfoWrapper.#ctor(System.IO.FileInfo,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileInfoWrapper.Length">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.FileInfoWrapper.Open">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IFileNodeInfo">
            <summary>
            Represents an entity in a file system.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.Name">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.SubName">
            <summary>
            The sub-name part of the file, discriminating it
            from similar files with the same name, but not logically part
            of the name.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.Path">
            <summary>
            The full path to the file, not including the initial '/'.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.Revision">
            <summary>
            The revision of the file, used in some file systems.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.CreationTime">
            <summary>
            The creation time of the file, if present.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.LastWriteTime">
            <summary>
            The modification time of the file, if present.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.LastAccessTime">
            <summary>
            The time of last access to the file, if present.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.Kind">
            <summary>
            The kind of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFileNodeInfo.Attributes">
            <summary>
            The attributes of the file.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.FileKind">
            <summary>
            Specific kind of the file or directory.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FileKind.None">
            <summary>
            The file has no special kind.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FileKind.Embedded">
            <summary>
            The file is embedded in another file.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FileKind.ArchiveItem">
            <summary>
            The file is an entry in an archive.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.FileSystemInfoWrapper`1">
            <summary>
            Wraps an instance of <see cref="T:System.IO.FileSystemInfo"/>, implementing <see cref="T:IS4.SFI.Services.IFileNodeInfo"/>
            through it.
            </summary>
            <typeparam name="TInfo">The concrete type, either <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/>.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.BaseInfo">
            <summary>
            The underlying info instance.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.FileSystemInfoWrapper`1.#ctor(`0,IS4.SFI.Services.IPersistentKey)">
            <summary>
            Creates a new instance of the wrapper.
            </summary>
            <param name="baseInfo">The value of <see cref="P:IS4.SFI.Services.FileSystemInfoWrapper`1.BaseInfo"/> to use when delegating properties.</param>
            <param name="key">
            The implementation of <see cref="T:IS4.SFI.Services.IPersistentKey"/> to use.
            If none is provided, <see cref="P:IS4.SFI.Services.IPersistentKey.ReferenceKey"/> is <see cref="P:System.AppDomain.CurrentDomain"/>
            and <see cref="P:IS4.SFI.Services.IPersistentKey.DataKey"/> is <see cref="F:System.IO.FileSystemInfo.FullPath"/>.
            </param>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.SubName">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Path">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.CreationTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.LastWriteTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.LastAccessTime">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Revision">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Access">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Kind">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FileSystemInfoWrapper`1.Attributes">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.FileSystemInfoWrapper`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.FileNodeInfoExtensions">
            <summary>
            The extension methods for <see cref="T:IS4.SFI.Services.IFileNodeInfo"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.FileNodeInfoExtensions.EnumerateFiles(IS4.SFI.Services.IFileNodeInfo)">
            <summary>
            Enumerates all files under the <paramref name="fileNode"/> object, by recursively obtaining
            <see cref="P:IS4.SFI.Services.IDirectoryInfo.Entries"/> on the directories within.
            </summary>
            <param name="fileNode">An instance of either <see cref="T:IS4.SFI.Services.IFileInfo"/> or <see cref="T:IS4.SFI.Services.IDirectoryInfo"/>.</param>
            <returns>A sequence of all instances of <see cref="T:IS4.SFI.Services.IFileInfo"/> in the hierarchy.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IFormatObject">
            <summary>
            Contains information about a recognized format from data.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFormatObject.Extension">
            <summary>
            The common extension of the format.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFormatObject.MediaType">
            <summary>
            The media type of the format.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IFormatObject.Format">
            <summary>
            The format recognized from the data.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IFormatObject.GetValue``2(IS4.SFI.IResultFactory{``0,``1},``1)">
            <summary>
            Obtains the specific value parsed via the format,
            by calling the provided instance of <see cref="T:IS4.SFI.IResultFactory`2"/>.
            </summary>
            <typeparam name="TResult">The user-defined type of the result of <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/>.</typeparam>
            <typeparam name="TArgs">The user-defined type of the arguments to <see cref="M:IS4.SFI.IResultFactory`2.Invoke``1(``0,`1)"/>.</typeparam>
            <param name="resultFactory">The object which receives the value stored in the instance.</param>
            <param name="args">Additional arguments provided to <paramref name="resultFactory"/>.</param>
            <returns>The result of <paramref name="resultFactory"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IFormatObject`1">
            <summary>
            Contains information about a recognized format from data,
            alongside a particular instance parsed from the data.
            </summary>
            <typeparam name="T">The type of the stored object.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.IFormatObject`1.Value">
            <summary>
            The parsed value, also obtained via <see cref="M:IS4.SFI.Services.IFormatObject.GetValue``2(IS4.SFI.IResultFactory{``0,``1},``1)"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IBinaryFormatObject">
            <summary>
            Represents a format object for a binary format, created as a result of
            parsing data described by <see cref="T:IS4.SFI.Services.IDataObject"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IBinaryFormatObject.Data">
            <summary>
            Contains information about the raw data.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IBinaryFormatObject`1">
            <summary>
            Represents a format object for a binary format, created as a result of
            parsing data described by <see cref="T:IS4.SFI.Services.IDataObject"/>,
            alongside a particular instance parsed from the data.
            </summary>
            <typeparam name="T">The type of the stored object.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.FormatObject`1">
            <summary>
            The base implementation of <see cref="T:IS4.SFI.Services.IFormatObject`1"/>.
            </summary>
            <typeparam name="T">The type of the stored object.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.FormatObject`1.Format">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FormatObject`1.Extension">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FormatObject`1.MediaType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.FormatObject`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.FormatObject`1.#ctor(IS4.SFI.Formats.IFileFormat,`0)">
            <summary>
            Creates a new instance of the format object.
            </summary>
            <param name="format">The value of <see cref="P:IS4.SFI.Services.FormatObject`1.Format"/>.</param>
            <param name="value">The value of <see cref="P:IS4.SFI.Services.FormatObject`1.Value"/>.</param>
        </member>
        <member name="M:IS4.SFI.Services.FormatObject`1.ToString">
            <inheritdoc/>
        </member>
        <member name="F:IS4.SFI.Services.FormatObject`1.mimeCoreName">
            <summary>
            Captures the core descriptive component of a MIME type, such as
            <c>bsf</c> from <c>application/vnd.3gpp.bsf+xml</c>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.FormatObject`1.Item(System.Uri)">
            <summary>
            Applies the format referenced by this object to a URI
            identifying the raw data.
            </summary>
            <param name="value">The URI identifying the original raw data.</param>
            <returns>The new URI reflecting the format.</returns>
        </member>
        <member name="T:IS4.SFI.Services.BinaryFormatObject`1">
            <summary>
            The base implementation of <see cref="T:IS4.SFI.Services.IBinaryFormatObject`1"/>.
            </summary>
            <typeparam name="T">The type of the stored object.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.BinaryFormatObject`1.Data">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.BinaryFormatObject`1.Format">
            <inheritdoc cref="P:IS4.SFI.Services.FormatObject`1.Format"/>
        </member>
        <member name="M:IS4.SFI.Services.BinaryFormatObject`1.#ctor(IS4.SFI.Services.IDataObject,IS4.SFI.Formats.IBinaryFileFormat,`0)">
            <param name="data">The value of <see cref="P:IS4.SFI.Services.BinaryFormatObject`1.Data"/>.</param>
            <inheritdoc cref="M:IS4.SFI.Services.FormatObject`1.#ctor(IS4.SFI.Formats.IFileFormat,`0)"/>
            <param name="format"><inheritdoc cref="M:IS4.SFI.Services.FormatObject`1.#ctor(IS4.SFI.Formats.IFileFormat,`0)" path="/param[@name='format']"/></param>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.FormatObject`1.#ctor(IS4.SFI.Formats.IFileFormat,`0)" path="/param[@name='value']"/></param>
        </member>
        <member name="T:IS4.SFI.Services.OutputFileDelegate">
            <summary>
            Produces a file as a by-product of an operation.
            </summary>
            <param name="isBinary">Whether the file is binary or textual.</param>
            <param name="properties">Additional user-defined properties of the file.</param>
            <param name="writer">If the file is opened, a stream is created and provided to this function to write the file.</param>
            <returns>The result of <paramref name="writer"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IHasFileOutput">
            <summary>
            Allows extraction of arbitrary files during the operations
            performed by this instance.
            </summary>
        </member>
        <member name="E:IS4.SFI.Services.IHasFileOutput.OutputFile">
            <summary>
            This event is executed when a file could be produced.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IEntityOutputProvider`1">
            <summary>
            Supports description of arbitrary entites through an instance of <see cref="T:IS4.SFI.Services.OutputFileDelegate"/>.
            </summary>
            <typeparam name="T">The supported entity type.</typeparam>
        </member>
        <member name="M:IS4.SFI.Services.IEntityOutputProvider`1.DescribeEntity(`0,IS4.SFI.Services.OutputFileDelegate,IS4.SFI.Services.INodeMatchProperties)">
            <summary>
            If <paramref name="entity"/> can be described, invokes <paramref name="output"/>,
            providing data related to the entity.
            </summary>
            <param name="entity">The entity to describe.</param>
            <param name="output">The instance of <see cref="T:IS4.SFI.Services.OutputFileDelegate"/> for storing the data.</param>
            <param name="properties">Additional properties passed to <paramref name="output"/>.</param>
            <returns>Whether the entity was recognized.</returns>
        </member>
        <member name="T:IS4.SFI.Services.FormattingMethod">
            <summary>
            Specifies the formatting method used when converting the hash output
            to a URI.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FormattingMethod.Hex">
            <summary>
            The bytes of the output are convered to uppercase hex characters.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FormattingMethod.Base32">
            <summary>
            <see cref="M:IS4.SFI.DataTools.Base32``1(``0,System.Text.StringBuilder,System.String)"/> is used to format the bytes.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FormattingMethod.Base58">
            <summary>
            <see cref="M:IS4.SFI.DataTools.Base58``1(``0,System.Text.StringBuilder,System.String)"/> is used to format the bytes.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FormattingMethod.Base64">
            <summary>
            <see cref="M:IS4.SFI.DataTools.Base64Url(System.ArraySegment{System.Byte},System.Text.StringBuilder)"/> is used to format the bytes.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.FormattingMethod.Decimal">
            <summary>
            The bytes are formatted as an unsigned decimal value.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IHashAlgorithm">
            <summary>
            Describes the properties of a hash algorithm.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.Name">
            <summary>
            The human-readable name of the algorithm.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IHashAlgorithm.GetHashSize(System.Int64)">
            <summary>
            Calculates the estimated size of the digest depending on the size of the input data.
            </summary>
            <param name="dataSize">The size of the input data.</param>
            <returns>The hash size in bytes.</returns>
        </member>
        <member name="M:IS4.SFI.Services.IHashAlgorithm.EstimateUriSize(System.Int32)">
            <summary>
            Estimates the length of the URI that would be formatted from the hash of a particular length.
            </summary>
            <param name="hashSize">The length of the hash.</param>
            <returns>The size of the URI in characters.</returns>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.Identifier">
            <summary>
            The individual identifier of this hash algorithm.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.NumericIdentifier">
            <summary>
            The multihash identifier of the algorithm; see
            https://github.com/multiformats/multicodec/blob/master/table.csv.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.Prefix">
            <summary>
            The URI prefix for producing URIs of individual hashes.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.FormattingMethod">
            <summary>
            The formatting method to use when appending the hash to
            <see cref="P:IS4.SFI.Services.IHashAlgorithm.Prefix"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashAlgorithm.NiName">
            <summary>
            The name of the algorithm in the Named Information Hash Algorithm Registry
            (https://www.iana.org/assignments/named-information/named-information.xhtml).
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IDataHashAlgorithm">
            <summary>
            Represents a hash algorithm that accepts raw data as input.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IDataHashAlgorithm.ComputeHash(System.IO.Stream,IS4.SFI.Services.IPersistentKey)">
            <summary>
            Computes the value of the hash from an input stream.
            </summary>
            <param name="input">The input stream to compute the hash from.</param>
            <param name="key">The <see cref="T:IS4.SFI.Services.IPersistentKey"/> identifying the data, if needed for caching.</param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="M:IS4.SFI.Services.IDataHashAlgorithm.ComputeHash(System.Byte[],IS4.SFI.Services.IPersistentKey)">
            <summary>
            Computes the value of the hash from a byte buffer.
            </summary>
            <param name="buffer">The array of bytes to compute the hash from.</param>
            <param name="key">The <see cref="T:IS4.SFI.Services.IPersistentKey"/> identifying the data, if needed for caching.</param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="M:IS4.SFI.Services.IDataHashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32,IS4.SFI.Services.IPersistentKey)">
            <summary>
            Computes the value of the hash from a byte buffer.
            </summary>
            <param name="buffer">The array of bytes to compute the hash from.</param>
            <param name="offset">The index in the array to start reading.</param>
            <param name="count">The number of bytes to read from the array.</param>
            <param name="key">The <see cref="T:IS4.SFI.Services.IPersistentKey"/> identifying the data, if needed for caching.</param>
            <returns>The bytes of the hash.</returns>
            <returns></returns>
        </member>
        <member name="M:IS4.SFI.Services.IDataHashAlgorithm.ComputeHash(System.ArraySegment{System.Byte},IS4.SFI.Services.IPersistentKey)">
            <summary>
            Computes the value of the hash from a byte buffer.
            </summary>
            <param name="buffer">The sequence of bytes to compute the hash from.</param>
            <param name="key">The <see cref="T:IS4.SFI.Services.IPersistentKey"/> identifying the data, if needed for caching.</param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IFileHashAlgorithm">
            <summary>
            Represents a hash algorithm that accepts files or directories as input.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IFileHashAlgorithm.ComputeHash(IS4.SFI.Services.IFileInfo)">
            <summary>
            Computes the value of the hash from a file, described by <see cref="T:IS4.SFI.Services.IFileInfo"/>.
            </summary>
            <param name="file">The file to compute the hash from.</param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="M:IS4.SFI.Services.IFileHashAlgorithm.ComputeHash(IS4.SFI.Services.IDirectoryInfo,System.Boolean)">
            <summary>
            Computes the value of the hash from a directory, described by <see cref="T:IS4.SFI.Services.IDirectoryInfo"/>.
            </summary>
            <param name="directory">The directory to compute the hash from.</param>
            <param name="contentOnly">
            <see langword="true"/> if the directory should be used only as container of its entries
            and not be itself a part in the hashed hierarchy.
            </param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IObjectHashAlgorithm`1">
            <summary>
            Represents a hash algorithm that accepts arbitrary objects as input.
            </summary>
            <typeparam name="T">The type of the accepted objects.</typeparam>
        </member>
        <member name="M:IS4.SFI.Services.IObjectHashAlgorithm`1.ComputeHash(`0)">
            <summary>
            Computes the value of the hash from <paramref name="object"/>.
            </summary>
            <param name="object">The object to compute the hash from.</param>
            <returns>The bytes of the hash.</returns>
        </member>
        <member name="T:IS4.SFI.Services.HashAlgorithm">
            <summary>
            A base implementation of <see cref="T:IS4.SFI.Services.IHashAlgorithm"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.Name">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.HashSize">
            <summary>
            The usual size of the hash.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.FormattingMethod">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.NumericIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.NiName">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.#ctor(IS4.SFI.Vocabulary.IndividualUri,System.Int32,System.String,IS4.SFI.Services.FormattingMethod)">
            <summary>
            Creates a new instance of the hash algorithm.
            </summary>
            <param name="identifier">The value of <see cref="P:IS4.SFI.Services.HashAlgorithm.Identifier"/>.</param>
            <param name="hashSize">The value of <see cref="P:IS4.SFI.Services.HashAlgorithm.HashSize"/>.</param>
            <param name="prefix">The value of <see cref="P:IS4.SFI.Services.HashAlgorithm.Prefix"/>.</param>
            <param name="formatting">The value of <see cref="P:IS4.SFI.Services.HashAlgorithm.FormattingMethod"/>.</param>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.GetHashSize(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.EstimateUriSize(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.HashAlgorithm.Item(System.ArraySegment{System.Byte})">
            <summary>
            Produces a URI identifying the result of the hashing.
            </summary>
            <param name="data">The bytes of the hash.</param>
            <returns>
            A new <see cref="T:System.Uri"/> instance, using the
            <see cref="P:IS4.SFI.Services.HashAlgorithm.Prefix"/> property alongside <see cref="P:IS4.SFI.Services.HashAlgorithm.FormattingMethod"/>
            to format <paramref name="data"/>.
            </returns>
        </member>
        <member name="F:IS4.SFI.Services.HashAlgorithm.TriplesPerHash">
            <summary>
            An estimate on the number of triples used in
            <see cref="M:IS4.SFI.Services.HashAlgorithm.AddHash(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.IHashAlgorithm,System.ArraySegment{System.Byte},IS4.SFI.Services.ILinkedNodeFactory,IS4.SFI.Services.OutputFileDelegate)"/>
            to initialize the hash node and assign it to a node. 
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.AddHash(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.IHashAlgorithm,System.Byte[],IS4.SFI.Services.ILinkedNodeFactory,IS4.SFI.Services.OutputFileDelegate)">
            <inheritdoc cref="M:IS4.SFI.Services.HashAlgorithm.AddHash(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.IHashAlgorithm,System.ArraySegment{System.Byte},IS4.SFI.Services.ILinkedNodeFactory,IS4.SFI.Services.OutputFileDelegate)"/>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.AddHash(IS4.SFI.Services.ILinkedNode,IS4.SFI.Services.IHashAlgorithm,System.ArraySegment{System.Byte},IS4.SFI.Services.ILinkedNodeFactory,IS4.SFI.Services.OutputFileDelegate)">
            <summary>
            Creates a <see cref="T:IS4.SFI.Services.ILinkedNode"/> representing a particular hash
            and assigns it to <paramref name="node"/>, via
            <see cref="F:IS4.SFI.Vocabulary.Properties.Digest"/>.
            </summary>
            <param name="node">The node to assign the hash to.</param>
            <param name="algorithm">The particular algorithm used to produce the hash.</param>
            <param name="hash">The bytes of the hash.</param>
            <param name="nodeFactory">The factory to use when creating the <see cref="T:IS4.SFI.Services.ILinkedNode"/>.</param>
            <param name="output">An instance of <see cref="T:IS4.SFI.Services.OutputFileDelegate"/> handling arbitrary files related to the hash.</param>
            <returns>The node for the hash.</returns>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.FromLength(System.Int32)">
            <summary>
            Returns a particular instance of a <see cref="T:IS4.SFI.Tools.BuiltInHash"/>
            that has the provided size of the output.
            </summary>
            <param name="length">The hash size in bytes.</param>
            <returns>The respective instance, or <see langword="null"/> if there is none.</returns>
        </member>
        <member name="M:IS4.SFI.Services.HashAlgorithm.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.DataHashAlgorithm">
            <summary>
            A base implementation of <see cref="T:IS4.SFI.Services.IDataHashAlgorithm"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.DataHashAlgorithm.#ctor(IS4.SFI.Vocabulary.IndividualUri,System.Int32,System.String,IS4.SFI.Services.FormattingMethod)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.DataHashAlgorithm.ComputeHash(System.IO.Stream,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.DataHashAlgorithm.ComputeHash(System.Byte[],IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.DataHashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.DataHashAlgorithm.ComputeHash(System.ArraySegment{System.Byte},IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.FileHashAlgorithm">
            <summary>
            A base implementation of <see cref="T:IS4.SFI.Services.IFileHashAlgorithm"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.FileHashAlgorithm.#ctor(IS4.SFI.Vocabulary.IndividualUri,System.Int32,System.String,IS4.SFI.Services.FormattingMethod)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.FileHashAlgorithm.ComputeHash(IS4.SFI.Services.IFileInfo)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.FileHashAlgorithm.ComputeHash(IS4.SFI.Services.IDirectoryInfo,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.ObjectHashAlgorithm`1">
            <summary>
            A base implementation of <see cref="T:IS4.SFI.Services.IObjectHashAlgorithm`1"/>.
            </summary>
            <typeparam name="T">The type of the accepted objects.</typeparam>
        </member>
        <member name="M:IS4.SFI.Services.ObjectHashAlgorithm`1.#ctor(IS4.SFI.Vocabulary.IndividualUri,System.Int32,System.String,IS4.SFI.Services.FormattingMethod)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.ObjectHashAlgorithm`1.ComputeHash(`0)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.IHashedContentUriFormatter">
            <summary>
            A formatter for creating URIs for resources identified by a particular hash,
            via its <see cref="T:IS4.SFI.Services.IIndividualUriFormatter`1"/> implementation.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IHashedContentUriFormatter.SuitableAlgorithms">
            <summary>
            Stores the collection of algorithms that are suitable to use
            for producing the URI (because they are safe for collisions).
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IHashedContentUriFormatter.EstimateUriSize(IS4.SFI.Services.IHashAlgorithm,System.Int32)">
            <summary>
            Estimates the size of the resulting URI from a hash algorithm and its output size.
            </summary>
            <param name="algorithm">The used hash algorithm.</param>
            <param name="hashSize">The size of the hash in bytes.</param>
            <returns>The size of the URI in characters.</returns>
        </member>
        <member name="T:IS4.SFI.Services.AdHashedContentUriFormatter">
            <summary>
            Formats URIs using their multihash representation,
            in the <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Ad"/> vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.AdHashedContentUriFormatter.SuitableAlgorithms">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.AdHashedContentUriFormatter.Item(System.ValueTuple{IS4.SFI.Services.IHashAlgorithm,System.Byte[],System.Boolean})">
            <summary>
            Creates a new URI from a tuple storing the information about the hash.
            </summary>
            <param name="value">
            A tuple storing the hash algorithm, the hash bytes, and whether
            the resource is binary or not.
            </param>
            <returns>The URI identifying the resource.</returns>
        </member>
        <member name="M:IS4.SFI.Services.AdHashedContentUriFormatter.EstimateUriSize(IS4.SFI.Services.IHashAlgorithm,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.AdHashedContentUriFormatter.#ctor(IS4.SFI.Services.IHashAlgorithm[])">
            <summary>
            Creates a new instance of the formatter from a collection of suitable algorithms.
            </summary>
            <param name="suitableAlgorithms">The collecion of algorithms suitable for using.</param>
        </member>
        <member name="M:IS4.SFI.Services.AdHashedContentUriFormatter.#ctor(System.Collections.Generic.IEnumerable{IS4.SFI.Services.IHashAlgorithm})">
            <summary>
            Creates a new instance of the formatter from a collection of suitable algorithms.
            </summary>
            <param name="suitableAlgorithms">The collecion of algorithms suitable for using.</param>
        </member>
        <member name="T:IS4.SFI.Services.NiHashedContentUriFormatter">
            <summary>
            Creates ni: URIs, either using the <see cref="P:IS4.SFI.Services.IHashAlgorithm.NiName"/>
            or via its multihash representation.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.NiHashedContentUriFormatter.SuitableAlgorithms">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.NiHashedContentUriFormatter.Item(System.ValueTuple{IS4.SFI.Services.IHashAlgorithm,System.Byte[],System.Boolean})">
            <summary>
            Creates a new URI from a tuple storing the information about the hash.
            </summary>
            <param name="value">
            A tuple storing the hash algorithm, the hash bytes, and whether
            the resource is binary or not.
            </param>
            <returns>The URI identifying the resource.</returns>
        </member>
        <member name="M:IS4.SFI.Services.NiHashedContentUriFormatter.EstimateUriSize(IS4.SFI.Services.IHashAlgorithm,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.NiHashedContentUriFormatter.#ctor(IS4.SFI.Services.IHashAlgorithm[])">
            <summary>
            Creates a new instance of the formatter from a collection of suitable algorithms.
            </summary>
            <param name="suitableAlgorithms">The collecion of algorithms suitable for using.</param>
        </member>
        <member name="M:IS4.SFI.Services.NiHashedContentUriFormatter.#ctor(System.Collections.Generic.IEnumerable{IS4.SFI.Services.IHashAlgorithm})">
            <summary>
            Creates a new instance of the formatter from a collection of suitable algorithms.
            </summary>
            <param name="suitableAlgorithms">The collecion of algorithms suitable for using.</param>
        </member>
        <member name="T:IS4.SFI.Services.NiHashedContentUriFormatter.NiUri">
            <summary>
            The ni: URI supports individual formatting based on an instance of <see cref="T:IS4.SFI.Services.IFormatObject"/>
            to use instead of the default media type specified as part of the URI (via ct).
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.ILinkedNode">
            <summary>
            Represents a write-only abstraction of an RDF resource,
            allowing setting its classes as <see cref="T:IS4.SFI.Vocabulary.ClassUri"/>
            and properties as <see cref="T:IS4.SFI.Vocabulary.PropertyUri"/>.
            The node is usually internally backed by a URI.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.ILinkedNode.Scheme">
            <summary>
            The scheme of the URI identifying this node.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Describes the node using the RDF/XML description provided
            through <paramref name="rdfXmlReader"/>.
            </summary>
            <param name="rdfXmlReader">
            An XML reader for a valid RDF/XML document. The document
            shall describe the node by using a blank relative URI,
            i.e. &lt;rdf:Description rdf:about=""&gt;
            </param>
            <param name="subjectUris">
            Stores a collection of URIs that represent this node.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="rdfXmlReader"/> is not positioned on an
            {http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF element.
            </exception>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.DescribeAsync(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Describe(System.Func{System.Uri,System.Xml.XmlReader},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Describes the node using the RDF/XML description provided
            through <paramref name="rdfXmlReaderFactory"/>.
            </summary>
            <param name="rdfXmlReaderFactory">
            A function returning an XML reader, like for <see cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>,
            but the argument is an URI that should be used as the base URI of the graph.
            </param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
            <exception cref="T:System.ArgumentException">
            The reader returned by <paramref name="rdfXmlReaderFactory"/>
            is not positioned on an
            {http://www.w3.org/1999/02/22-rdf-syntax-ns#}RDF element.
            </exception>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.DescribeAsync(System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Xml.XmlReader}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Func{System.Uri,System.Xml.XmlReader},System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlDocument,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Describes the node using the RDF/XML description provided
            in <paramref name="rdfXmlDocument"/>.
            </summary>
            <param name="rdfXmlDocument">
            A valid RDF/XML document. The document
            shall describe the node by using a blank relative URI,
            i.e. &lt;rdf:Description rdf:about=""&gt;
            </param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Describe(System.Func{System.Uri,System.Xml.XmlDocument},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Describes the node using the RDF/XML description
            obtained when calling <paramref name="rdfXmlDocumentFactory"/>.
            </summary>
            <param name="rdfXmlDocumentFactory">
            A function returning an XML document, like for <see cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlDocument,System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>,
            but the argument is an URI that should be used as the base URI of the graph.
            </param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.DescribeAsync(System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Xml.XmlDocument}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Func{System.Uri,System.Xml.XmlDocument},System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.TryDescribe(System.Object,System.Func{System.Uri,System.Object},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <summary>
            Attempts to describe the node in an implementation-specific
            way, using a <paramref name="loader"/> which, if recognized,
            operates on the result of <paramref name="dataSource"/>.
            </summary>
            <param name="loader">An instance of an implementation-specific RDF loader class.</param>
            <param name="dataSource">
            A function that provides the argument to the loader.
            The parameter is a URI that should be used as the base.</param>
            <param name="subjectUris"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})" path="/param[@name='subjectUris']"/></param>
            <returns>
            <see langword="true"/> if <paramref name="loader"/> was correctly recognized
            and executed, <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.TryDescribeAsync(System.Object,System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Object}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.TryDescribe(System.Object,System.Func{System.Uri,System.Object},System.Collections.Generic.IReadOnlyCollection{System.Uri})"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.SetClass(IS4.SFI.Vocabulary.ClassUri)">
            <summary>
            Sets one of the classes of the resource to be <paramref name="class"/>.
            </summary>
            <param name="class">The class to add to the list of classes of this resource.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.SetClass``1(IS4.SFI.Services.IClassUriFormatter{``0},``0)">
            <summary>
            Sets one of the classes of the resource to be the result of
            formatting <paramref name="value"/> with <paramref name="formatter"/>.
            </summary>
            <typeparam name="TClass">The type of the formatted value.</typeparam>
            <param name="formatter">The formatter to use.</param>
            <param name="value">The value to use with <paramref name="formatter"/>.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.IndividualUri)">
            <summary>
            Sets one of the properties to an individual resource.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The individual value to assign.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)">
            <summary>
            Sets one of the properties to a plain literal.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The literal value to assign.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.DatatypeUri)">
            <summary>
            Sets one of the properties to a literal with a particular datatype.
            </summary>
            <param name="datatype">The datatype of the literal.</param>
            <param name="property"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='property']"/></param>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='value']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Services.IDatatypeUriFormatter{``0},``0)">
            <summary>
            Sets one of the properties to a literal with a datatype produced from a formatter.
            </summary>
            <typeparam name="TData">The type supported by <paramref name="datatypeFormatter"/>.</typeparam>
            <param name="datatypeFormatter">The formatter to use for the datatype.</param>
            <param name="datatypeValue">The value to format for the datatype.</param>
            <param name="property"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='property']"/></param>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='value']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)">
            <summary>
            Sets one of the properties to the string value of a literal with a particular datatype.
            </summary>
            <typeparam name="TValue">The type of the literal.</typeparam>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.DatatypeUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)">
            <summary>
            Sets one of the properties to the string value of a literal with a datatype produced from a formatter.
            </summary>
            <typeparam name="TData">The type supported by <paramref name="datatypeFormatter"/>.</typeparam>
            <param name="datatypeFormatter">The formatter to use for the datatype.</param>
            <param name="datatypeValue">The value to format for the datatype.</param>
            <param name="property"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)" path="/param[@name='property']"/></param>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)" path="/param[@name='value']"/></param>
            <typeparam name="TValue"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)" path="/typeparam[@name='TValue']"/></typeparam>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.LanguageCode)">
            <summary>
            Sets one of the properties to a literal with a particular language.
            </summary>
            <param name="language">The language of the literal.</param>
            <param name="property"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='property']"/></param>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)" path="/param[@name='value']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.IIndividualUriFormatter{``0},``0)">
            <summary>
            Sets one of the properties to an individual produced from a formatter.
            </summary>
            <typeparam name="TValue">The type of <paramref name="value"/>.</typeparam>
            <param name="property">The property to set.</param>
            <param name="formatter">The formatter to use.</param>
            <param name="value">The value to format.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.Uri)">
            <summary>
            Sets one of the properties to a URI literal.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The URI value to assign.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.ILinkedNode)">
            <summary>
            Sets one of the properties to a resource identified by another <see cref="T:IS4.SFI.Services.ILinkedNode"/>.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The node to assign.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.Boolean)">
            <summary>
            Sets one of the properties to a boolean value.
            </summary>
            <param name="property">The property to set.</param>
            <param name="value">The boolean value to assign.</param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0)">
            <summary>
            Sets one of the properties to a literal value with an automatically recognized type.
            </summary>
            <typeparam name="TValue">The type of the literal.</typeparam>
            <param name="property">The property to set.</param>
            <param name="value">The value to assign.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="value"/> doesn't have a recognized datatype.
            </exception>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)">
            <typeparam name="TProp">The type of <paramref name="propertyValue"/>.</typeparam>
            <param name="propertyFormatter">The formatter to use for the property.</param>
            <param name="propertyValue">The value formatted with <paramref name="propertyFormatter"/>.</param>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.IndividualUri)"/>
            <param name="value"><inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.IndividualUri)" path="/param[@name='value']"/></param>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.DatatypeUri)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``3(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1,IS4.SFI.Services.IDatatypeUriFormatter{``2},``2)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Vocabulary.LanguageCode)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.LanguageCode)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Services.IIndividualUriFormatter{``1},``1)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.IIndividualUriFormatter{``0},``0)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.Uri)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.Uri)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Services.ILinkedNode)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.ILinkedNode)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.Boolean)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set(IS4.SFI.Vocabulary.PropertyUri,System.Boolean)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1)">
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0)"/>
            <inheritdoc cref="M:IS4.SFI.Services.ILinkedNode.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)"/>
        </member>
        <member name="P:IS4.SFI.Services.ILinkedNode.Item(System.String)">
            <summary>
            Produces a subnode that is logically aggregated under the current node,
            from its name in <paramref name="subName"/>.
            </summary>
            <param name="subName">A name that is appended to the URI of this node.</param>
            <returns>A new node with the specific subname.</returns>
        </member>
        <member name="P:IS4.SFI.Services.ILinkedNode.Item(IS4.SFI.Services.IIndividualUriFormatter{System.Uri})">
            <summary>
            Produces a subnode that is logically aggregated under the current node,
            from a formatter that transforms the current URI.
            </summary>
            <param name="subFormatter">The formatter that transforms the current URI.</param>
            <returns>A new node with the transformed URI.</returns>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.SetAsBase">
            <summary>
            Informs the implementation that this resource is used as a base
            for a larger hierarchy, in which case it might use its URI
            as a base URI when producing RDF output.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.Match">
            <summary>
            Asks the implementation whether this resource is matched by an
            externally configured query. This may be used in combination with
            <see cref="T:IS4.SFI.Services.IHasFileOutput"/> and <see cref="T:IS4.SFI.Services.OutputFileDelegate"/>.
            </summary>
            <returns>A sequence of objects produced by the queries that matched the resource.</returns>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.In(IS4.SFI.Vocabulary.GraphUri)">
            <summary>
            Returns a version of this node that writes output to a graph identified
            by <paramref name="graph"/>.
            </summary>
            <param name="graph">The graph to use for storing the description of the resource.</param>
            <returns>A new version of the node, or <see langword="null"/> if the graph is disabled.</returns>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNode.In``1(IS4.SFI.Services.IGraphUriFormatter{``0},``0)">
            <summary>
            Returns a version of this node that writes output to a graph identified
            by <paramref name="graphFormatter"/> and <paramref name="value"/>.
            </summary>
            <typeparam name="TGraph">The type of <paramref name="value"/>.</typeparam>
            <param name="graphFormatter">The formatter to use for storing the description of the resource.</param>
            <param name="value">The value to format using <paramref name="graphFormatter"/>.</param>
            <returns>A new version of the node, or <see langword="null"/> if the graph is disabled.</returns>
        </member>
        <member name="T:IS4.SFI.Services.LinkedNode`3">
            <summary>
            Provides a base implementation of <see cref="T:IS4.SFI.Services.ILinkedNode"/>.
            </summary>
            <typeparam name="TNode">The type of the underlying nodes.</typeparam>
            <typeparam name="TGraphNode">The type of the underlying graph.</typeparam>
            <typeparam name="TVocabularyCache">The type of the used vocabulary cache.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Subject">
            <summary>
            The subject node wrapped by this instance.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Graph">
            <summary>
            The graph to use for describing the node, logically containing <see cref="P:IS4.SFI.Services.LinkedNode`3.Subject"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Cache">
            <summary>
            The vocabulary cache to use when creating nodes from vocabulary items.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.#ctor(`0,`1,`2)">
            <summary>
            Creates a new instance of the linked node.
            </summary>
            <param name="subject">The value of <see cref="P:IS4.SFI.Services.LinkedNode`3.Subject"/>.</param>
            <param name="graph">The value of <see cref="P:IS4.SFI.Services.LinkedNode`3.Graph"/>.</param>
            <param name="cache">The value of <see cref="P:IS4.SFI.Services.LinkedNode`3.Cache"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="subject"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.HandleTriple(`0,`0,`0)">
            <summary>
            Asserts a new triple in the current graph.
            </summary>
            <param name="subj">The subject node of the triple.</param>
            <param name="pred">The predicate node of the triple.</param>
            <param name="obj">The object node of the triple.</param>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode(System.Uri)">
            <summary>
            Creates a new URI node in the current graph.
            </summary>
            <param name="uri">The URI identifying the node.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode(System.String)">
            <summary>
            Creates a new literal node in the current graph.
            </summary>
            <param name="value">The value of the plain literal.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode(System.String,`0)">
            <summary>
            Creates a new literal node in the current graph.
            </summary>
            <param name="value">The value of the literal.</param>
            <param name="datatype">The node representing the datatype of the literal.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode(System.String,System.String)">
            <summary>
            Creates a new literal node in the current graph.
            </summary>
            <param name="value">The value of the literal.</param>
            <param name="language">The language of the literal.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode(System.Boolean)">
            <summary>
            Creates a new literal node in the current graph.
            </summary>
            <param name="value">The boolean value of the literal.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNode``1(``0)">
            <summary>
            Creates a new literal node in the current graph.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="value">The value of the literal.</param>
            <returns>An instance of <typeparamref name="TNode"/> representing the node.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="value"/> doesn't have a recognized datatype.
            </exception>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateGraphNode(System.Uri)">
            <summary>
            Creates a new graph node from a URI.
            </summary>
            <param name="uri">The URI of the graph.</param>
            <returns>An instance of <typeparamref name="TGraphNode"/> for the graph.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.GetUri(`0)">
            <summary>
            Obtains the URI from an instance of <typeparamref name="TNode"/>.
            </summary>
            <param name="node">The node to obtain the URI from.</param>
            <returns>The URI of the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateNew(`0)">
            <summary>
            Creates a new instance of <see cref="T:IS4.SFI.Services.LinkedNode`3"/>
            with a different subject.
            </summary>
            <param name="subject">The new subject to use.</param>
            <returns>A new instance of the node.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.CreateInGraph(`1)">
            <summary>
            Creates a new instance of <see cref="T:IS4.SFI.Services.LinkedNode`3"/>
            in a different graph.
            </summary>
            <param name="graph">The new graph to use.</param>
            <returns>A new instance of the node.</returns>
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Scheme">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Describe(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.DescribeAsync(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Describe(System.Xml.XmlDocument,System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Describe(System.Func{System.Uri,System.Xml.XmlReader},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.DescribeAsync(System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Xml.XmlReader}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Describe(System.Func{System.Uri,System.Xml.XmlDocument},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.DescribeAsync(System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Xml.XmlDocument}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.TryDescribe(System.Object,System.Func{System.Uri,System.Object},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.TryDescribeAsync(System.Object,System.Func{System.Uri,System.Threading.Tasks.ValueTask{System.Object}},System.Collections.Generic.IReadOnlyCollection{System.Uri})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.SetAsBase">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Match">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.SetClass(IS4.SFI.Vocabulary.ClassUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.SetClass``1(IS4.SFI.Services.IClassUriFormatter{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.IndividualUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Services.IDatatypeUriFormatter{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``2(IS4.SFI.Vocabulary.PropertyUri,``0,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,System.String,IS4.SFI.Vocabulary.LanguageCode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.IIndividualUriFormatter{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Services.ILinkedNode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set(IS4.SFI.Vocabulary.PropertyUri,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Vocabulary.PropertyUri,``0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Vocabulary.IndividualUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Services.IDatatypeUriFormatter{``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1,IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``3(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1,IS4.SFI.Services.IDatatypeUriFormatter{``2},``2)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.String,IS4.SFI.Vocabulary.LanguageCode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Services.IIndividualUriFormatter{``1},``1)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,IS4.SFI.Services.ILinkedNode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``1(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Set``2(IS4.SFI.Services.IPropertyUriFormatter{``0},``0,``1)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Item(System.String)">
            <inheritdoc cref="P:IS4.SFI.Services.ILinkedNode.Item(System.String)"/>;
        </member>
        <member name="P:IS4.SFI.Services.LinkedNode`3.Item(IS4.SFI.Services.IIndividualUriFormatter{System.Uri})">
            <inheritdoc cref="P:IS4.SFI.Services.ILinkedNode.Item(IS4.SFI.Services.IIndividualUriFormatter{System.Uri})"/>;
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.In(IS4.SFI.Vocabulary.GraphUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.In``1(IS4.SFI.Services.IGraphUriFormatter{``0},``0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Equals(IS4.SFI.Services.LinkedNode{`0,`1,`2})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Equals(IS4.SFI.Services.ILinkedNode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNode`3.ToString">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.ILinkedNodeFactory">
            <summary>
            Factory to create new instances of <see cref="T:IS4.SFI.Services.ILinkedNode"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.ILinkedNodeFactory.Root">
            <summary>
            The default root of linked nodes, as a formatter using a unique identifier
            of the resource.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNodeFactory.Create``1(IS4.SFI.Services.IIndividualUriFormatter{``0},``0)">
            <summary>
            Creates a new linked node from a formatted value.
            </summary>
            <typeparam name="T">The type of <paramref name="value"/>.</typeparam>
            <param name="formatter">The formatter to use.</param>
            <param name="value">The value to format using <paramref name="formatter"/>.</param>
            <returns>A new linked node representing the formatted value.</returns>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNodeFactory.IsSafeLiteral(System.String)">
            <summary>
            Determines whether <paramref name="str"/> is safe for storing in a
            literal node directly.
            </summary>
            <param name="str">The string value to check.</param>
            <returns>
            <see langword="true"/> if the string is safe to use as a literal, <see langword="false"/> if it must be escaped or discarded.
            </returns>
            <remarks>
            A literal can be escaped with methods like <see cref="M:IS4.SFI.DataTools.CreateLiteralJsonLd(System.String)"/>.
            </remarks>
        </member>
        <member name="M:IS4.SFI.Services.ILinkedNodeFactory.IsSafePredicate(System.Uri)">
            <summary>
            Determines whether <paramref name="uri"/> is safe for using it as a
            predicate, for compatibility with formats such as RDF/XML.
            </summary>
            <param name="uri">The URI value to check.</param>
            <returns>
            <see langword="true"/> if the URI is safe to use as a predicate, <see langword="false"/> if it must be escaped or discarded.
            </returns>
            <remarks>
            A predicate URI may be encoded using methods like <see cref="M:IS4.SFI.UriTools.UriToUuidUri(System.Uri)"/>.
            </remarks>
        </member>
        <member name="T:IS4.SFI.Services.LinkedNodeFactoryExtensions">
            <summary>
            Additional extension methods for <see cref="T:IS4.SFI.Services.ILinkedNodeFactory"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateUnique(IS4.SFI.Services.ILinkedNodeFactory)">
            <summary>
            Creates a unique node from a newly-generated UUID using
            the <see cref="P:IS4.SFI.Services.ILinkedNodeFactory.Root"/>.
            </summary>
            <param name="factory">The factory instance to use.</param>
            <returns>The node for a newly created resource.</returns>
        </member>
        <member name="M:IS4.SFI.Services.LinkedNodeFactoryExtensions.CreateBlank(IS4.SFI.Services.ILinkedNodeFactory)">
            <summary>
            Creates a new unique linked blank node.
            </summary>
            <param name="factory">The factory instance to use.</param>
            <returns>A new linked node corresponding to a blank node.</returns>
        </member>
        <member name="T:IS4.SFI.Services.INodeMatchProperties">
            <summary>
            Contains properties relevant for saving a file as a result of <see cref="!:ILinkedNode.Match(out INodeMatchProperties)"/>,
            such as through <see cref="T:IS4.SFI.Services.OutputFileDelegate"/>. Additional properties can
            be retrieved via <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.INodeMatchProperties.Extension">
            <summary>
            The extension of the file, indicating the format.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.INodeMatchProperties.MediaType">
            <summary>
            The content type of the file, if downloaded.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.INodeMatchProperties.Size">
            <summary>
            The size of the file, if known.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.INodeMatchProperties.Name">
            <summary>
            The desired name of the file.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.INodeMatchProperties.PathFormat">
            <summary>
            The argument to <see cref="M:IS4.SFI.TextTools.SubstituteVariables(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})"/>
            to format the final path.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.NodeMatchPropertiesExtensions">
            <summary>
            Extension methods for <see cref="T:IS4.SFI.Services.INodeMatchProperties"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.NodeMatchPropertiesExtensions.GetProperties(IS4.SFI.Services.INodeMatchProperties)">
            <summary>
            Retrieves the collection of all properties as pairs.
            </summary>
            <param name="properties">The <see cref="T:IS4.SFI.Services.INodeMatchProperties"/> instance to use.</param>
            <returns>A sequence of pairs storing all properties of the instance.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IPersistentKey">
            <summary>
            Stores a pair of objects to server as a key when information
            about this instance need to be cached, usually via
            <see cref="T:IS4.SFI.Tools.PersistenceStore`2"/>.
            This allows the instance to be reused or discarded as long as the
            <see cref="P:IS4.SFI.Services.IPersistentKey.ReferenceKey"/> and <see cref="P:IS4.SFI.Services.IPersistentKey.DataKey"/> unique identify
            the entity it describes.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IPersistentKey.ReferenceKey">
            <summary>
            The identity part of the key, intended to be compared by reference
            (i.e. via <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>)
            during caching. The logical lifetime of this instance does not exceed the
            lifetime of this object.
            </summary>
            <example>
            For an entry in an archive, this property could point to the instance
            describing the archive itself (as long as the same instance is used
            for all its entries).
            </example>
        </member>
        <member name="P:IS4.SFI.Services.IPersistentKey.DataKey">
            <summary>
            The equality part of the key, intended to be compared by value
            (i.e. via <see cref="M:System.Object.Equals(System.Object,System.Object)"/>)
            during caching.
            </summary>
            <example>
            For an entry in an archive, this property could contain the path of the entry
            within the archive, as long as <see cref="P:IS4.SFI.Services.IPersistentKey.ReferenceKey"/> identifies
            the archive itself.
            </example>
        </member>
        <member name="T:IS4.SFI.Services.IStreamFactory">
            <summary>
            Represents any object that can be opened for reading.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IStreamFactory.Length">
            <summary>
            The assumed length of the data; might be different from the actual
            length of the stream returned by <see cref="M:IS4.SFI.Services.IStreamFactory.Open"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IStreamFactory.Access">
            <summary>
            The type of access the <see cref="M:IS4.SFI.Services.IStreamFactory.Open"/> method permits.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IStreamFactory.Open">
            <summary>
            Opens a new stream from the object and returns it.
            </summary>
            <returns>A newly created stream pointing to the beginning of the data.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IStreamFactoryConverter">
            <summary>
            An implementation of <see cref="T:System.ComponentModel.TypeConverter"/> that provides a user-friendly
            conversion to string from an arbitrary instance of <see cref="T:IS4.SFI.Services.IStreamFactory"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Services.IStreamFactoryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.IStreamFactoryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Services.StreamFactoryAccess">
            <summary>
            Describes the type of access permitted by <see cref="M:IS4.SFI.Services.IStreamFactory.Open"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.StreamFactoryAccess.Single">
            <summary>
            The method can be called only once.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.StreamFactoryAccess.Reentrant">
            <summary>
            The method can be called multiple times, but only after the previous stream
            has reached the end.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.StreamFactoryAccess.Parallel">
            <summary>
            The method can be called any number of times in parallel.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.MemoryStreamFactory">
            <summary>
            Produces new instances of <see cref="T:System.IO.MemoryStream"/> from an array buffer.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.MemoryStreamFactory.Access">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.MemoryStreamFactory.ReferenceKey">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.MemoryStreamFactory.DataKey">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Services.MemoryStreamFactory.Length">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Services.MemoryStreamFactory.#ctor(System.ArraySegment{System.Byte},IS4.SFI.Services.IPersistentKey)">
            <summary>
            Creates a new instance of the stream factory from the given buffer.
            </summary>
            <param name="buffer">The array buffer to use for the stream.</param>
            <param name="key">The object to provide the <see cref="T:IS4.SFI.Services.IPersistentKey"/> implementation.</param>
        </member>
        <member name="M:IS4.SFI.Services.MemoryStreamFactory.#ctor(System.ArraySegment{System.Byte},System.Object,System.Object)">
            <summary>
            Creates a new instance of the stream factory from the given buffer.
            </summary>
            <param name="buffer">The array buffer to use for the stream.</param>
            <param name="referenceKey">The value of <see cref="P:IS4.SFI.Services.MemoryStreamFactory.ReferenceKey"/>.</param>
            <param name="dataKey">The value of <see cref="P:IS4.SFI.Services.MemoryStreamFactory.DataKey"/>.</param>
        </member>
        <member name="M:IS4.SFI.Services.MemoryStreamFactory.Open">
            <summary>
            Opens the stored array buffer as a read-only instance of <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <returns>The stream pointing to the stored array buffer.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IUriFormatter`1">
            <summary>
            Allows production of URIs from values of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="P:IS4.SFI.Services.IUriFormatter`1.Item(`0)">
            <summary>
            Creates a new URI based on <paramref name="value"/> in a way specific
            to the implementation.
            </summary>
            <param name="value">The value serving as the basis for the URI.</param>
            <returns>A new URI incorporating <paramref name="value"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Services.IIndividualUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as individuals in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.IPropertyUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as properties in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.IClassUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as classes in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.IGenericUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as individuals, properties, or classes in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.IDatatypeUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as datatypes in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.IGraphUriFormatter`1">
            <summary>
            Allows production of URIs from values with the intention of using
            them as graphs in RDF.
            </summary>
            <typeparam name="T">The type of values used by the formatter.</typeparam>
        </member>
        <member name="T:IS4.SFI.Services.UriFormatter">
            <summary>
            A simple implementation of <see cref="T:IS4.SFI.Services.IUriFormatter`1"/> that produces
            URIs from <see cref="T:System.String"/> or just returning the input <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Services.UriFormatter.Instance">
            <summary>
            The singleton instance of the formatter.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.UriFormatter.Item(System.String)">
            <summary>
            Creates a new absolute URI from <paramref name="value"/>.
            </summary>
            <param name="value">The absolute URI string.</param>
            <returns>The created URI.</returns>
        </member>
        <member name="P:IS4.SFI.Services.UriFormatter.Item(System.Uri)">
            <summary>
            Returns <paramref name="value"/> unchanged.
            </summary>
            <param name="value">The URI instance to use.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="T:IS4.SFI.Services.IVocabularyCache">
            <summary>
            Provides caching of vocabulary terms.
            </summary>
        </member>
        <member name="P:IS4.SFI.Services.IVocabularyCache.Vocabularies">
            <summary>
            Stores a collection of used vocabularies
            as instances of <see cref="T:IS4.SFI.Vocabulary.VocabularyUri"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Services.IVocabularyCache`2">
            <summary>
            Provides caching of objects of type <typeparamref name="TNode"/>
            based on specific vocabulary terms represented by <typeparamref name="TTerm"/>.
            </summary>
            <typeparam name="TTerm">
            The type of terms this cache supports, implementing <see cref="T:IS4.SFI.Vocabulary.ITermUri"/>.
            </typeparam>
            <typeparam name="TNode">
            The node type cached by the object.
            </typeparam>
        </member>
        <member name="P:IS4.SFI.Services.IVocabularyCache`2.Item(`0)">
            <summary>
            Obtains (or produces) the cached node for the term identified
            by <paramref name="term"/>.
            </summary>
            <param name="term">The term to obtain the node from.</param>
            <returns>A node that represents an instance of the term.</returns>
        </member>
        <member name="T:IS4.SFI.Tags.IImageResourceTag">
            <summary>
            A tag providing information about the resource a particular image is coming from.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageResourceTag.IsTransparent">
            <summary>
            <see langword="true"/> if the image should be transparent, <see langword="false"/> otherwise.
            </summary>
        </member>
        <member name="T:IS4.SFI.Tags.IImageTag">
            <summary>
            A tag storing configuration for analyzing images.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageTag.StoreDimensions">
            <summary>
            Whether to add the image's dimensions to the output.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageTag.MakeThumbnail">
            <summary>
            Whether to add the thumbnail to the output.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageTag.LowFrequencyHash">
            <summary>
            Whether to compute low-frequency hashes from the image.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageTag.HighFrequencyHash">
            <summary>
            Whether to compute high-frequency hashes from the image.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.IImageTag.ByteHash">
            <summary>
            Whether to compute byte-based hashes from the image.
            </summary>
        </member>
        <member name="T:IS4.SFI.Tags.ImageTag">
            <summary>
            A default implementation of <see cref="T:IS4.SFI.Tags.IImageTag"/> with
            all options enabled.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tags.ImageTag.StoreDimensions">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tags.ImageTag.MakeThumbnail">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tags.ImageTag.LowFrequencyHash">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tags.ImageTag.HighFrequencyHash">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tags.ImageTag.ByteHash">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.TextTools">
            <summary>
            Contains various utility methods for manipulating text or producing human-readable labels.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.SizeSuffix(System.Int64,System.Int32)">
            <summary>
            Creates a human-friendly size string using standard 1024-based size units.
            </summary>
            <param name="value">The size to be formatted.</param>
            <param name="decimalPlaces">How many decimal places to include in the size.</param>
            <returns>The size formatted as "[-]{value} {unit_prefix}B"</returns>
        </member>
        <member name="F:IS4.SFI.TextTools.hostSplitChars">
            <summary>
            Used to split the domain name or IP in the host portion of a URI.
            </summary>
        </member>
        <member name="F:IS4.SFI.TextTools.slashSplitChars">
            <summary>
            Used to split the path portion of a URI if the host is specified.
            </summary>
        </member>
        <member name="F:IS4.SFI.TextTools.colonSplitChars">
            <summary>
            Used to split the path portion of a URI if the host is not specified.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.GetUriMediaTypeComponents(System.Uri)">
            <summary>
            Breaks down a URI according to its components in a natural hierarchy,
            from the top-level domain name, towards its fragment.
            </summary>
            <param name="uri">The URI to dissect.</param>
            <returns>The sequence of all URI components in order.</returns>
        </member>
        <member name="F:IS4.SFI.TextTools.badMimeCharacters">
            <summary>
            These characters are not allowed in a MIME type. The &amp; is allowed, but is used for other purposes.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.GetFakeMediaTypeFromXml(System.Uri,System.String,System.String)">
            <summary>
            Creates a fake media type from a namespace URI, PUBLIC identifier,
            and the root element name in an XML document.
            </summary>
            <param name="ns">The root namespace URI (may be <see langword="null"/>).</param>
            <param name="publicId">The PUBLIC identifier (may be <see langword="null"/>).</param>
            <param name="rootName">The name of the root element.</param>
            <returns>A MIME type in the form of "application/x.ns.{path}+xml", where path
            is formed from the individual components of <paramref name="ns"/>, ending with <paramref name="rootName"/>.
            If <paramref name="ns"/> is <see langword="null"/> and <paramref name="publicId"/> is provided,
            the namespace URI is created via <see cref="M:IS4.SFI.UriTools.CreatePublicId(System.String)"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetFakeMediaTypeFromType``1">
            <summary>
            Creates a fake media type from a .NET type.
            </summary>
            <typeparam name="T">The type to use for the media type.</typeparam>
            <returns>A MIME type in the form of "application/x.obj.{name}", where name
            is the result of <see cref="M:IS4.SFI.TextTools.GetIdentifierFromType``1"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetIdentifierFromType``1">
            <summary>
            Creates an (MIME-safe) identifier from a .NET type.
            </summary>
            <typeparam name="T">The type to use for the identifier.</typeparam>
            <returns>A concatenation of the name of the type and names of all
            its generic arguments.
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetIdentifierFromType(System.Type)">
            <inheritdoc cref="M:IS4.SFI.TextTools.GetIdentifierFromType``1"/>
            <param name="type">The type to use for the identifier.</param>
        </member>
        <member name="F:IS4.SFI.TextTools.hyphenCharacters">
            <summary>
            Matches a letter after which a hyphen could be placed, as either a lowercase letter followed
            by an uppercase letter, or an uppercase letter or digit followed by an uppercase letter and a lowercase letter.
            </summary>
        </member>
        <member name="F:IS4.SFI.TextTools.friendNamespace">
            <summary>
            Matches any namespace that is located within <see cref="N:System"/> or <see cref="N:IS4.SFI"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.TextTools.interfaceLetter">
            <summary>
            Matches a letter I followed a capital letter, denoting interfaces by convention.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.FakeTypeNameCache`1.CommonPrefix(System.String,System.String)">
            <summary>
            Returns the length of the common prefix of <paramref name="a"/> and <paramref name="b"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.FormatMimeName(System.String)">
            <summary>
            Produces a MIME-friendly name by hyphenating the name, converting to lowercase and encoding unsafe characters.
            </summary>
            <param name="name">The name to format.</param>
            <returns>The resulting formatted name.</returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetFakeMediaTypeFromSignature(System.String)">
            <summary>
            Creates a fake media type from a file signature characters.
            </summary>
            <param name="signature">The signature of the file.</param>
            <returns>A MIME type in the form of "application/x.sig.{<paramref name="signature"/>}"
            (converted to lowercase).
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetFakeMediaTypeFromInterpreter(System.String)">
            <summary>
            Creates a fake media type from an interpreter command.
            </summary>
            <param name="interpreter">The interpreter command.</param>
            <returns>A MIME type in the form of "application/x.exec.{<paramref name="interpreter"/>}"
            (converted to lowercase).
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.GetUserFriendlyName``1(``0)">
            <summary>
            Returns a user-friendly string representation of an object.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="entity">The object to retrieve the name from.</param>
            <returns>
            <para>
            If <paramref name="entity"/> is an instance of <see cref="T:System.Type"/>,
            returns its name expressed in a C#-like syntax.
            </para>
            <para>
            If <paramref name="entity"/> implements <see cref="T:System.IFormattable"/>,
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/> is used,
            using an invariant culture.
            </para>
            <para>
            If <typeparamref name="T"/> explicitly provides an instance of
            <see cref="T:System.ComponentModel.TypeConverter"/> that defines <see cref="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)"/>,
            that method is preferred for the result, otherwise <see cref="M:System.Object.ToString"/> is called.
            If the returned string is empty or a result of the default implementation of <see cref="M:System.Object.ToString"/>,
            calls <see cref="M:IS4.SFI.TextTools.GetUserFriendlyName``1(``0)"/> on the type of <paramref name="entity"/> or the type
            that was ultimately used by the <see cref="M:System.Object.ToString"/> implementation.
            </para>
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.TypeConverterHasDefinedStringConversion(System.ComponentModel.TypeConverter)">
            <summary>
            Checks that a type converter has a defined conversion to string.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.GetTypeFromName``1(System.Type,System.String)">
            <summary>
            Checks if <paramref name="name"/> corresponds to an existing type (or is empty).
            </summary>
        </member>
        <member name="F:IS4.SFI.TextTools.wildcardRegex">
            <summary>
            Matches any sequence of '*', a single occurence of '?', or a sequence of any other characters.
            </summary>
        </member>
        <member name="M:IS4.SFI.TextTools.ConvertWildcardToRegex(System.String)">
            <summary>
            Creates an instance of <see cref="T:System.Text.RegularExpressions.Regex"/> from a wildcard pattern.
            </summary>
            <param name="pattern">The pattern, using * and ? as special characters.</param>
            <returns>
            A regular expression matching the whole string, where each occurence of '*'
            in <paramref name="pattern"/> is replaced by ".*", each occurence of '?'
            is replaced by ".", and the remaining portions are escaped with <see cref="M:System.Text.RegularExpressions.Regex.Escape(System.String)"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.TextTools.SubstituteVariables(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Substitutes <paramref name="variables"/> in <paramref name="text"/>.
            </summary>
            <param name="text">The pattern to replace variables in.</param>
            <param name="variables">A collection of key-value pairs to replace in <paramref name="text"/>.</param>
            <returns>The text with substituted variables.</returns>
            <remarks>
            The current implementation uses <see cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)"/> to perform the replacement.
            </remarks>
        </member>
        <member name="T:IS4.SFI.Tools.BuiltInHash">
            <summary>
            Represents a hash algorithm backed using a native <see cref="T:System.Security.Cryptography.HashAlgorithm"/>
            instance.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.BuiltInHash.MD5">
            <summary>
            The MD5 hash algorithm, using <see cref="T:System.Security.Cryptography.MD5"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.BuiltInHash.SHA1">
            <summary>
            The SHA-1 hash algorithm, using <see cref="T:System.Security.Cryptography.SHA1"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.BuiltInHash.SHA256">
            <summary>
            The SHA-256 hash algorithm, using <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.BuiltInHash.SHA384">
            <summary>
            The SHA-384 hash algorithm, using <see cref="T:System.Security.Cryptography.SHA384"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.BuiltInHash.SHA512">
            <summary>
            The SHA-512 hash algorithm, using <see cref="T:System.Security.Cryptography.SHA512"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash.Algorithm">
            <summary>
            Provides the backing instance of <see cref="T:System.Security.Cryptography.HashAlgorithm"/>
            for the current thread.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash.AlgorithmType">
            <summary>
            Stores the base type of <see cref="P:IS4.SFI.Tools.BuiltInHash.Algorithm"/>,
            inheriting from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash.NumericIdentifier">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash.NiName">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.BuiltInHash.#ctor(System.Func{System.Security.Cryptography.HashAlgorithm},IS4.SFI.Vocabulary.IndividualUri,System.String,System.Nullable{System.Int32},System.String,IS4.SFI.Services.FormattingMethod)">
            <summary>
            Creates a new instance of the hash algorithm from a factory function.
            </summary>
            <param name="factory">Function to create instances of <see cref="T:System.Security.Cryptography.HashAlgorithm"/> when needed.</param>
            <param name="identifier">The individual identifier of the algorithm.</param>
            <param name="prefix">The URI prefix used when creating URIs of hashes.</param>
            <param name="numericIdentifier">The value of <see cref="P:IS4.SFI.Tools.BuiltInHash.NumericIdentifier"/>.</param>
            <param name="niName">The value of <see cref="P:IS4.SFI.Tools.BuiltInHash.NiName"/>.</param>
            <param name="formattingMethod">The formatting method for creating URIs.</param>
        </member>
        <member name="M:IS4.SFI.Tools.BuiltInHash.ComputeHash(System.IO.Stream,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.BuiltInHash.ComputeHash(System.Byte[],IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.BuiltInHash.ComputeHash(System.Byte[],System.Int32,System.Int32,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.BuiltInHash`1">
            <summary>
            Represents a hash algorithm backed using a native <typeparamref name="THash"/>
            instance, inheriting from <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <typeparam name="THash">
            The base type of the inner hash algorithm, also exposed as <see cref="P:IS4.SFI.Tools.BuiltInHash`1.AlgorithmType"/>.
            </typeparam>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash`1.AlgorithmType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.BuiltInHash`1.Algorithm">
            <inheritdoc cref="P:IS4.SFI.Tools.BuiltInHash.Algorithm"/>
        </member>
        <member name="M:IS4.SFI.Tools.BuiltInHash`1.#ctor(System.Func{`0},IS4.SFI.Vocabulary.IndividualUri,System.String,System.Nullable{System.Int32},System.String,IS4.SFI.Services.FormattingMethod)">
            <inheritdoc cref="M:IS4.SFI.Tools.BuiltInHash.#ctor(System.Func{System.Security.Cryptography.HashAlgorithm},IS4.SFI.Vocabulary.IndividualUri,System.String,System.Nullable{System.Int32},System.String,IS4.SFI.Services.FormattingMethod)"/>
        </member>
        <member name="T:IS4.SFI.Tools.EncodedUri">
            <summary>
            A class derived from <see cref="T:System.Uri"/> changing the default
            <see cref="M:System.Uri.ToString"/> implementation to use
            <see cref="P:System.Uri.AbsoluteUri"/> or <see cref="P:System.Uri.OriginalString"/>
            instead, as long as <see cref="P:IS4.SFI.Tools.EncodedUri.Enabled"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.EncodedUri.Enabled">
            <summary>
            Whether to enable the overriding behaviour of
            <see cref="M:IS4.SFI.Tools.EncodedUri.ToString"/>, globally.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.EncodedUri.#ctor(System.String)">
            <summary>
            Creates a new instance of the URI.
            </summary>
            <param name="uriString">The string representation of the URI, passed to <see cref="M:System.Uri.#ctor(System.String)"/>.</param>
        </member>
        <member name="M:IS4.SFI.Tools.EncodedUri.#ctor(System.String,System.UriKind)">
            <summary>
            Creates a new instance of the URI.
            </summary>
            <param name="uriString">The string representation of the URI, passed to <see cref="M:System.Uri.#ctor(System.String,System.UriKind)"/>.</param>
            <param name="uriKind">The kind of the URI.</param>
        </member>
        <member name="M:IS4.SFI.Tools.EncodedUri.ToString">
            <summary>
            If <see cref="P:IS4.SFI.Tools.EncodedUri.Enabled"/> is falls, calls the base implementation of
            <see cref="M:System.Uri.ToString"/>. Otherwise, returns either
            <see cref="P:System.Uri.AbsoluteUri"/> or <see cref="P:System.Uri.OriginalString"/>
            depending on the value of <see cref="P:System.Uri.IsAbsoluteUri"/>.
            </summary>
            <returns>The string value of the URI.</returns>
        </member>
        <member name="T:IS4.SFI.Tools.Extensions">
            <summary>
            Stores miscellaneous extension methods.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Deconstruct``2(System.Collections.Generic.KeyValuePair{``0,``1},``0@,``1@)">
            <summary>
            Deconstructs <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into its components.
            </summary>
            <typeparam name="TKey">The type of <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</typeparam>
            <typeparam name="TValue">The type of <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>.</typeparam>
            <param name="pair">The deconstructed pair of values.</param>
            <param name="key">The variable receiving <see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>.</param>
            <param name="value">The variable receiving <see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/></param>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Is``1(System.Exception)">
            <summary>
            Returns <see langword="true"/> if <paramref name="exception"/>, or one of its inner
            exceptions, is an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The exception type to check.</typeparam>
            <param name="exception">The input instance of <see cref="T:System.Exception"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="exception"/> has <typeparamref name="T"/>
            as one of its base classes, or if the same holds for its
            <see cref="P:System.Exception.InnerException"/> or one of
            <see cref="P:System.AggregateException.InnerExceptions"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.GetData(System.IO.MemoryStream)">
            <summary>
            Obtains the byte array buffer stored in an instance of
            <see cref="T:System.IO.MemoryStream"/>, without copying if possible.
            </summary>
            <param name="memoryStream">The stream to obtain the data from.</param>
            <returns>
            Either the result of <see cref="M:System.IO.MemoryStream.TryGetBuffer(System.ArraySegment{System.Byte}@)"/>,
            or <see cref="M:System.IO.MemoryStream.ToArray"/> if that fails.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.GetString(System.Text.Encoding,System.ArraySegment{System.Byte})">
            <summary>
            Decodes a sequence of bytes into a string based on the encoding.
            </summary>
            <param name="encoding">The instance of <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="bytes">The byte sequence to decode.</param>
            <returns>
            The result of <see cref="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)"/>
            applied on the array segment.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.ToBase64String(System.ArraySegment{System.Byte})">
            <summary>
            Converts the given byte sequence to a base64-encoded string.
            </summary>
            <param name="bytes">The byte sequence to convert.</param>
            <returns>
            The result of <see cref="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)"/>
            applied on the array segment.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.IndexOf``1(System.ArraySegment{``0},``0)">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.IndexOf``1(System.ArraySegment{``0},``0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.IndexOf``1(System.ArraySegment{``0},``0,System.Int32)">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.IndexOf``1(System.ArraySegment{``0},``0,System.Int32,System.Int32)"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.IndexOf``1(System.ArraySegment{``0},``0,System.Int32,System.Int32)">
            <summary>
            Searches for the given element <paramref name="value"/> in the input
            array segment, and returns its index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="segment">The used <see cref="T:System.ArraySegment`1"/> instance.</param>
            <param name="value">The element to search.</param>
            <param name="startIndex">The index in the segment where to begin searching.</param>
            <param name="count">The maximum number of elements to search.</param>
            <returns>The index of the searched element within the segment, or -1 if not found.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.At``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Retrieves the element in an array segment at a particular index.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="segment">The used <see cref="T:System.ArraySegment`1"/> instance.</param>
            <param name="index">The index of the element.</param>
            <returns>The value of the element at <paramref name="index"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.CopyTo``1(System.ArraySegment{``0},``0[],System.Int32)">
            <summary>
            Copies the elements from an array segment to an array, by calling
            <see cref="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)"/> on the underlying
            array.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="segment">The used <see cref="T:System.ArraySegment`1"/> instance.</param>
            <param name="array">The destination array.</param>
            <param name="index">The index in the destination array.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Write(System.IO.Stream,System.ArraySegment{System.Byte})">
            <summary>
            Writes the bytes from an array segment to a stream.
            </summary>
            <param name="stream">The used <see cref="T:System.IO.Stream"/> instance.</param>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.AsStream(System.ArraySegment{System.Byte},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:System.IO.MemoryStream"/> using the bytes
            from the array segment as the backing buffer.
            </summary>
            <param name="buffer">The array segment buffer to use.</param>
            <param name="writable">Whether the stream should allow writing or not.</param>
            <returns>The newly created instance.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Slice``1(System.ArraySegment{``0},System.Int32)">
            <summary>
            Creates an instance of <see cref="T:System.ArraySegment`1"/> over a range of
            elements in a parent <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <typeparam name="T">The element type of the array segment.</typeparam>
            <param name="segment">The used <see cref="T:System.ArraySegment`1"/> instance.</param>
            <param name="start">The starting index of the sub-segment.</param>
            <returns>
            A new <see cref="T:System.ArraySegment`1"/> starting at index <paramref name="start"/>
            in the original segment.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than
            <see cref="P:System.ArraySegment`1.Count"/>.
            </exception>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Slice``1(System.ArraySegment{``0},System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:System.ArraySegment`1"/> over a range of
            elements in a parent <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <typeparam name="T">The element type of the array segment.</typeparam>
            <param name="segment">The used <see cref="T:System.ArraySegment`1"/> instance.</param>
            <param name="start">The starting index of the sub-segment.</param>
            <param name="length">The length of the sub-segment.</param>
            <returns>
            A new <see cref="T:System.ArraySegment`1"/> starting at index <paramref name="start"/>
            in the original segment, spanning <paramref name="length"/> elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than
            <see cref="P:System.ArraySegment`1.Count"/>, or <paramref name="length"/>
            exceeds the size of the segment.
            </exception>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Slice``1(``0[],System.Int32)">
            <summary>
            Creates an instance of <see cref="T:System.ArraySegment`1"/> over a range of
            elements in an array.
            </summary>
            <typeparam name="T">The element type of the array segment.</typeparam>
            <param name="array">The used array to create the segment from.</param>
            <param name="start">The starting index of the segment.</param>
            <returns>
            A new <see cref="T:System.ArraySegment`1"/> starting at index <paramref name="start"/>
            in the original segment.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than
            the length of the array.
            </exception>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:System.ArraySegment`1"/> over a range of
            elements in an array.
            </summary>
            <typeparam name="T">The element type of the array segment.</typeparam>
            <param name="array">The used array to create the segment from.</param>
            <param name="start">The starting index of the segment.</param>
            <param name="length">The length of the segment.</param>
            <returns>
            A new <see cref="T:System.ArraySegment`1"/> starting at index <paramref name="start"/>
            in the array, spanning <paramref name="length"/> elements.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="start"/> is less than 0 or greater than
            the length of the array, or <paramref name="length"/>
            exceeds the size of the array.
            </exception>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.IsEntityAnalyzerType(System.Type)">
            <summary>
            Checks whether <paramref name="type"/> implements a concrete
            <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> type.
            </summary>
            <param name="type">The type instance to check.</param>
            <returns>
            <see langword="true"/> if one of the implemented interfaces is a concrete type
            instantiated from <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.GetEntityAnalyzerTypes(System.Type)">
            <summary>
            Returns the type parameters of all implementations of
            <see cref="T:IS4.SFI.Services.IEntityAnalyzer`1"/> on a type.
            </summary>
            <param name="type">The type instance to check.</param>
            <returns>A collection of types that can be analyzed
            by the analyzer.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.JoinAsLabel(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins all non-empty elements in a sequence to a label, using a separator.
            </summary>
            <param name="components">The sequence of texts to join.</param>
            <param name="separator">The separator placed between non-empty elements.</param>
            <returns>A non-empty label, or <see langword="null"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.Rent``1(System.Buffers.ArrayPool{``0},System.Int32,``0[]@)">
            <summary>
            Rents an array from the instance of <see cref="T:System.Buffers.ArrayPool`1"/>
            with a particular minimum size, and returns an instance of
            <see cref="T:System.IDisposable"/> that can be used to return it back to the
            pool.
            </summary>
            <typeparam name="T">The element type of the array.</typeparam>
            <param name="arrayPool">The instance of <see cref="T:System.Buffers.ArrayPool`1"/> to use.</param>
            <param name="minimumLength">The minimum length of the desired array.</param>
            <param name="array">A variable to receive the array from <paramref name="arrayPool"/>.</param>
            <returns>An instance of <see cref="T:System.IDisposable"/> that should be used to return the array.</returns>
            <remarks>
            This method internally calls <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)"/>
            and <see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/>.
            </remarks>
        </member>
        <member name="T:IS4.SFI.Tools.Extensions.ArrayPoolLease`1">
            <summary>
            Stores an array rented from an instance of <see cref="T:System.Buffers.ArrayPool`1"/>
            by calling <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)"/>, implementing
            <see cref="T:System.IDisposable"/> to automatically return the array to the pool.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.ArrayPoolLease`1.Dispose">
            <summary>
            Calls <see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/> on the rented array.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.TryGetString(System.Text.Encoding,System.ArraySegment{System.Byte})">
            <summary>
            Attempts to decode a sequence of bytes to string based on the encoding,
            while taking the preamble into account.
            </summary>
            <param name="encoding">The instance of <see cref="T:System.Text.Encoding"/> to use.</param>
            <param name="data">The byte sequence to decode.</param>
            <returns>The decoded string, or <see langword="null"/> if it could not be produced.</returns>
            <remarks>
            The preamble, as returned by <see cref="M:System.Text.Encoding.GetPreamble"/>, is
            attempted to be matched at the beginning of the data, and if it is found,
            only the remaining part of the data is decoded.
            </remarks>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})">
            <summary>
            Memory-casts the input span to a different element type,
            via <see cref="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})"/>.
            </summary>
            <typeparam name="T">The new element type of the span.</typeparam>
            <param name="span">The input <see cref="T:System.Span`1"/> instance to use.</param>
            <returns>
            A new span over the same memory range, but with elements
            reinterpreted to type <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Byte})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.SByte})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Char})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Int16})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.UInt16})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Int32})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.UInt32})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Int64})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.UInt64})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Single})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Double})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.IntPtr})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Boolean})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.SByte})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Int16})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.UInt16})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Int32})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.UInt32})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Int64})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.UInt64})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Single})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.Double})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.ReadOnlySpan{System.IntPtr})">
            <inheritdoc cref="M:IS4.SFI.Tools.Extensions.MemoryCast``1(System.Span{System.Boolean})"/>
        </member>
        <member name="T:IS4.SFI.Tools.GlobalObjectComparer`1">
            <summary>
            An abstract comparer that provides an order for instances of type
            <typeparamref name="T"/> while allowing custom comparison and keeping
            non-identical instances ordered.
            </summary>
            <typeparam name="T">The object type to compare.</typeparam>
        </member>
        <member name="M:IS4.SFI.Tools.GlobalObjectComparer`1.Compare(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.GlobalObjectComparer`1.CompareInner(`0,`0)">
            <summary>
            The internal comparison method.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            An integer with the same semantics as <see cref="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)"/>.
            Even if it returns 0, order is maintained.
            </returns>
        </member>
        <member name="T:IS4.SFI.Tools.IO.BitmapDataStream">
            <summary>
            Provides a read-only stream capable of reading from a memory-backed bitmap data
            (such as provided by System.Drawing.Imaging.BitmapData). The bytes are
            read starting from the first row of the image in sequence.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the stream.
            </summary>
            <param name="scan0">The pointer to the beginning of the first row of the image in memory.</param>
            <param name="stride">
            The number of bytes between the first pixels on two consecutive rows;
            could be negative to indicate that the rows go in reverse order in memory.
            </param>
            <param name="height">The number of rows in the image.</param>
            <param name="rowBytes">The number of bytes in a single row.</param>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the stream.
            </summary>
            <param name="scan0">The pointer to the beginning of the first row of the image in memory.</param>
            <param name="stride">
            The number of bytes between the first pixels on two consecutive rows;
            could be negative to indicate that the rows go in reverse order in memory.
            </param>
            <param name="height">The number of rows in the image.</param>
            <param name="width">The number of pixels on a row.</param>
            <param name="bpp">The number of bits representing a single pixel.</param>
        </member>
        <member name="P:IS4.SFI.Tools.IO.BitmapDataStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.BitmapDataStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.BitmapDataStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.BitmapDataStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.BitmapDataStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.BitmapDataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.IO.ChannelStream`1">
            <summary>
            Provides a read-only stream using an instance of <see cref="T:System.Threading.Channels.ChannelReader`1"/>
            using an arbitrary sequence of bytes as the source of data.
            </summary>
            <typeparam name="TSequence">The collection of bytes provided by the channel.</typeparam>
        </member>
        <member name="F:IS4.SFI.Tools.IO.ChannelStream`1.current">
            <summary>
            The current element in the sequence.
            It is sliced when it is not read as a whole.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.Length">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.IO.ChannelStream`1.Position">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.#ctor(System.Threading.Channels.ChannelReader{`0})">
            <summary>
            Creates a new stream instance from a channel reader.
            </summary>
            <param name="channelReader">
            The reader for the channel providing the byte sequences to read.
            </param>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.CreateReader(System.Threading.Channels.ChannelWriter{`0}@,System.Nullable{System.Int32})">
            <summary>
            Creates a new channel and retrieve its reader and writer.
            </summary>
            <param name="writer">The variable to receive the writer for the created channel.</param>
            <param name="capacity">The capacity of the channel, if it should be bounded.</param>
            <returns>The reader for the created channel.</returns>
            <remarks>
            The channel is created with the following settings:
            <list type="bullet">
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.SingleReader"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.SingleWriter"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.BoundedChannelOptions.FullMode"/> (if <paramref name="capacity"/> is provided)</term>
                <description><see cref="F:System.Threading.Channels.BoundedChannelFullMode.Wait"/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.TryGetNext">
            <summary>
            Synchronously retrieves the next byte sequence from
            the channel and stores it in <see cref="F:IS4.SFI.Tools.IO.ChannelStream`1.current"/>.
            </summary>
            <returns><see langword="true"/> if a sequence was retrieved.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadFrom(`0@,System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overriden in a derived type, copies <paramref name="len"/> bytes from the sequence
            <paramref name="current"/> into <paramref name="buffer"/>, and adjusts it to
            start with the bytes after that.
            </summary>
            <param name="current">The variable storing the byte sequence to copy from.</param>
            <param name="buffer">The target array to receive the bytes.</param>
            <param name="offset">The offset in <paramref name="buffer"/> to start copying to.</param>
            <param name="len">The number of bytes to copy.</param>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadInner(System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Reads from the current byte sequence stored in <see cref="F:IS4.SFI.Tools.IO.ChannelStream`1.current"/>
            into <paramref name="buffer"/>, calling <see cref="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadFrom(`0@,System.Byte[],System.Int32,System.Int32)"/>.
            </summary>
            <param name="buffer">The array to receive the bytes.</param>
            <param name="offset">The offset to write the data to, increased by its length after the operation.</param>
            <param name="count">The number of bytes to store, decreased by its length after the operation.</param>
            <returns>The number of copied bytes, or 0 if there are no more bytes in the current sequence.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.EndRead(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadFrom(`0@)">
            <summary>
            Reads a single byte from <paramref name="current"/> and modifies it
            to start on the next byte.
            </summary>
            <param name="current">The variable to provide the input sequence.</param>
            <returns>The first byte of the sequence.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadByteInner">
            <summary>
            Reads a single byte from <see cref="F:IS4.SFI.Tools.IO.ChannelStream`1.current"/> and adjusts it.
            </summary>
            <returns>The next byte, or -1 if the sequence is empty.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadByteAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:IS4.SFI.Tools.IO.ChannelStream`1.ReadByte"/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.EndWrite(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.Flush">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelStream`1.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.IO.ChannelArrayStream">
            <summary>
            An implementation of <see cref="T:IS4.SFI.Tools.IO.ChannelStream`1"/> for an
            instance of <see cref="T:System.ArraySegment`1"/> of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelArrayStream.#ctor(System.Threading.Channels.ChannelReader{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelArrayStream.Create(System.Threading.Channels.ChannelWriter{System.ArraySegment{System.Byte}}@,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:IS4.SFI.Tools.IO.ChannelArrayStream"/> and retrieves
            the writer to its underlying channel.
            </summary>
            <returns>The stream to read from the channel.</returns>
            <inheritdoc cref="M:IS4.SFI.Tools.IO.ChannelStream`1.CreateReader(System.Threading.Channels.ChannelWriter{`0}@,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelArrayStream.ReadFrom(System.ArraySegment{System.Byte}@,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelArrayStream.ReadFrom(System.ArraySegment{System.Byte}@)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.IO.ChannelMemoryStream">
            <summary>
            An implementation of <see cref="T:IS4.SFI.Tools.IO.ChannelStream`1"/> for an
            instance of <see cref="T:IS4.SFI.Tools.IO.UnmanagedMemoryRange"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelMemoryStream.#ctor(System.Threading.Channels.ChannelReader{IS4.SFI.Tools.IO.UnmanagedMemoryRange})">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelMemoryStream.Create(System.Threading.Channels.ChannelWriter{IS4.SFI.Tools.IO.UnmanagedMemoryRange}@,System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of <see cref="T:IS4.SFI.Tools.IO.ChannelMemoryStream"/> and retrieves
            the writer to its underlying channel.
            </summary>
            <returns>The stream to read from the channel.</returns>
            <inheritdoc cref="M:IS4.SFI.Tools.IO.ChannelStream`1.CreateReader(System.Threading.Channels.ChannelWriter{`0}@,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelMemoryStream.ReadFrom(IS4.SFI.Tools.IO.UnmanagedMemoryRange@,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.IO.ChannelMemoryStream.ReadFrom(IS4.SFI.Tools.IO.UnmanagedMemoryRange@)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.IO.UnmanagedMemoryRange">
            <summary>
            Represents a range of bytes in the unmanaged memory as a collection.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.IO.UnmanagedMemoryRange.Address">
            <summary>
            The starting address of the byte range.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.IO.UnmanagedMemoryRange.Count">
            <summary>
            The number of bytes in the range.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.IO.UnmanagedMemoryRange.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Creates a new instance of the range.
            </summary>
            <param name="address">The value of <see cref="P:IS4.SFI.Tools.IO.UnmanagedMemoryRange.Address"/>.</param>
            <param name="count">The value of <see cref="P:IS4.SFI.Tools.IO.UnmanagedMemoryRange.Count"/>.</param>
        </member>
        <member name="M:IS4.SFI.Tools.IO.UnmanagedMemoryRange.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.PersistenceStore`2">
            <summary>
            Stores cached values pertaining to an instance of <see cref="T:IS4.SFI.Services.IPersistentKey"/>.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="F:IS4.SFI.Tools.PersistenceStore`2.NullPlaceholder">
            <summary>
            The identity of this object is used instead of a <see langword="null"/> value as the key.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.PersistenceStore`2.#ctor(System.Func{`0,`1})">
            <summary>
            Creates a new instance of the store from a factory function.
            </summary>
            <param name="factory">
            A function providing the cached value from a key.
            It is called only once for a given key.
            </param>
        </member>
        <member name="P:IS4.SFI.Tools.PersistenceStore`2.Item(`0)">
            <summary>
            Accesses the stored value for a particular key.
            </summary>
            <param name="key">The key to lookup in the store.</param>
            <returns>The value corresponding to <paramref name="key"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Tools.StreamDataHash`1">
            <summary>
            Represents an incremental hash algorithm that uses a value of
            type <typeparamref name="T"/> to build the hash.
            </summary>
            <typeparam name="T">The type of the aggregation value.</typeparam>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.#ctor(IS4.SFI.Vocabulary.IndividualUri,System.Int32,System.String,IS4.SFI.Services.FormattingMethod)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.Initialize">
            <summary>
            Creates a new instance of <typeparamref name="T"/> and
            initializes it for new hashing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.Finalize(`0@)">
            <summary>
            Performs cleanup on an instance of <typeparamref name="T"/>
            when it is no longer required.
            </summary>
            <param name="instance">The variable storing the instance to dispose.</param>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.Append(`0@,System.ArraySegment{System.Byte})">
            <summary>
            Appends new data to an instance of <typeparamref name="T"/>.
            </summary>
            <param name="instance">The variable storing the instance to use.</param>
            <param name="segment">The new data to append.</param>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.Output(`0@)">
            <summary>
            Retrieves the hash as a byte array from an instance of <typeparamref name="T"/>.
            </summary>
            <param name="instance">The variable storing the instance to use.</param>
            <returns>The hash stored in the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Tools.StreamDataHash`1.ComputeHash(System.IO.Stream,IS4.SFI.Services.IPersistentKey)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.TypeInheritanceComparer`1">
            <summary>
            Compares objects of a specific type based on their concrete types,
            placing the more derived types before the less derived types.
            </summary>
            <typeparam name="T">The general type of the objects.</typeparam>
        </member>
        <member name="F:IS4.SFI.Tools.TypeInheritanceComparer`1.Instance">
            <summary>
            The singleton instance of the comparer.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.TypeInheritanceComparer`1.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.TypeInheritanceComparer`1.CompareInner(`0,`0)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.TypeInheritanceComparer`1.SelectType(System.Type)">
            <summary>
            Retrieves the collection of types relevant when comparing a given type.
            </summary>
            <param name="initial">The initial type to compare.</param>
            <returns>The collection of all compared types (only <paramref name="initial"/> by default)</returns>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.BaseXmlDocument">
            <summary>
            An extension of <see cref="T:System.Xml.XmlDocument"/> that allows specifying the
            <see cref="P:IS4.SFI.Tools.Xml.BaseXmlDocument.BaseURI"/> property or assigning it during the lifetime
            of the object.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.BaseXmlDocument.BaseURI">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.BaseXmlDocument.#ctor">
            <summary>
            Creates a new instance of the document.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.BaseXmlDocument.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Creates a new instance of the document.
            </summary>
            <param name="nameTable">The name table to use for <see cref="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)"/>.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.BaseXmlDocument.SetBaseURI(System.String)">
            <summary>
            Sets the current base URI.
            </summary>
            <param name="baseUri">The new value of <see cref="P:IS4.SFI.Tools.Xml.BaseXmlDocument.BaseURI"/>.</param>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.ChannelXmlReader">
            <summary>
            Provides support for reading XML data from a channel of
            snapshots as instances of <see cref="T:IS4.SFI.Tools.Xml.XmlReaderState"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.Xml.ChannelXmlReader.InitialPrototype">
            <summary>
            The reader serving as the prototype when reading has not yet started.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.ChannelXmlReader.GlobalReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.ChannelXmlReader.ScopeReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.ChannelXmlReader.QueryReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.ChannelXmlReader.ActiveReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.ChannelXmlReader.PassiveReader">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.#ctor(System.Threading.Channels.ChannelReader{IS4.SFI.Tools.Xml.XmlReaderState},System.Xml.XmlReader)">
            <summary>
            Creates a new instance of the XML reader from the given channel reader.
            </summary>
            <param name="channel">The channel to read the XML states from.</param>
            <param name="reader">The reader to use for properties about the document.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.Create(System.Xml.XmlReader,System.Threading.Channels.ChannelWriter{IS4.SFI.Tools.Xml.XmlReaderState}@,System.Nullable{System.Int32})">
            <summary>
            Creates a new channel and retrieve its XML reader and writer.
            </summary>
            <param name="reader">The reader to use for properties about the document.</param>
            <param name="writer">The variable to receive the writer for the created channel.</param>
            <param name="capacity">The capacity of the channel, if it should be bounded.</param>
            <returns>The XML reader using the created channel.</returns>
            <remarks>
            The channel is created with the following settings:
            <list type="bullet">
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.SingleReader"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.ChannelOptions.SingleWriter"/></term>
                <description><see langword="true"/></description>
            </item>
            <item>
                <term><see cref="P:System.Threading.Channels.BoundedChannelOptions.FullMode"/> (if <paramref name="capacity"/> is provided)</term>
                <description><see cref="F:System.Threading.Channels.BoundedChannelFullMode.Wait"/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.MoveToFirstAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.MoveToNextAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.ReadAttributeValue">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.ChannelXmlReader.MoveToElement">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.DelegatingXmlReader">
            <summary>
            An implementation of <see cref="T:System.Xml.XmlReader"/>, <see cref="T:System.Xml.IXmlLineInfo"/>,
            and <see cref="T:System.Xml.IXmlNamespaceResolver"/> that delegates all calls
            to a series of other readers to specific categories of tasks.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Closed">
            <summary>
            <see langword="true"/> if <see cref="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.Close"/> has been called.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.ScopeReader">
            <summary>
            The reader used to provide information about the current node
            or position in the document.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.QueryReader">
            <summary>
            The reader used to query information about the current node,
            such as the attributes of the current element.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.GlobalReader">
            <summary>
            The reader used for global information about the document.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.ActiveReader">
            <summary>
            The reader used to move in the XML data.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.PassiveReader">
            <summary>
            The reader used for inquiries about general capabilities.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.AttributeCount">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.BaseURI">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.CanReadBinaryContent">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.CanReadValueChunk">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.CanResolveEntity">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Depth">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.EOF">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.HasAttributes">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.IsEmptyElement">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Name">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.NamespaceURI">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.NameTable">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.NodeType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.QuoteChar">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.ReadState">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.SchemaInfo">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Settings">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.Value">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.XmlLang">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.XmlSpace">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.Close">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetAttribute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetValueAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.IsStartElement">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.IsStartElement(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.IsStartElement(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.LookupNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToAttribute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToContent">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToContentAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToElement">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToFirstAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.MoveToNextAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.ReadAttributeValue">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.ResolveEntity">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.Skip">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.SkipAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.ToString">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.LineNumber">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.DelegatingXmlReader.LinePosition">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.HasLineInfo">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.DelegatingXmlReader.LookupPrefix(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.InitialXmlReader">
            <summary>
            An XML reader that simulates the initial state before using another reader for the
            rest of operations.
            </summary>
        </member>
        <member name="F:IS4.SFI.Tools.Xml.InitialXmlReader.InitialPrototype">
            <summary>
            The reader serving as the prototype when reading has not yet started.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.InitialXmlReader.GlobalReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.InitialXmlReader.ScopeReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.InitialXmlReader.QueryReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.InitialXmlReader.ActiveReader">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.InitialXmlReader.PassiveReader">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.InitialXmlReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new instance of the reader.
            </summary>
            <param name="reader">The underlying reader to use after one call to <see cref="M:IS4.SFI.Tools.Xml.InitialXmlReader.Read"/>.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.InitialXmlReader.Read">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.InitialXmlReader.ReadAsync">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.XmlExtensions">
            <summary>
            Stores useful methods for handling XML objects.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlExtensions.LoadAsync(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>
            Asynchronously initializes an instance of <see cref="T:System.Xml.XmlDocument"/>
            from an XML reader, similarly to <see cref="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)"/>.
            </summary>
            <param name="document">The XML document instance to use.</param>
            <param name="reader">The XML reader to read the data from.</param>
        </member>
        <member name="T:IS4.SFI.Tools.Xml.XmlReaderState">
            <summary>
            Stores the immediate state from an XML reader.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.AttributeCount">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.BaseURI">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Depth">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.EOF">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.IsEmptyElement">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.LocalName">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.NamespaceURI">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.NodeType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Prefix">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.ReadState">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Value">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.CanReadBinaryContent">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.CanReadValueChunk">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.CanResolveEntity">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.HasAttributes">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.HasValue">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Name">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.ValueType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.XmlLang">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.XmlSpace">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.NameTable">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.SchemaInfo">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.IsNil">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.MemberType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.SchemaAttribute">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.SchemaElement">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.SchemaType">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Validity">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.Attributes">
            <summary>
            The collection of instances of <see cref="T:IS4.SFI.Tools.Xml.XmlReaderState"/>
            for the attributes of the current element or the element
            storing this attribute.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.AttributeContents">
            <summary>
            The collection of contents of the current attribute,
            as instances of <see cref="T:IS4.SFI.Tools.Xml.XmlReaderState"/>.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.NamespaceMap">
            <summary>
            The map of namespace prefix to value for namespaces valid in the current position.
            </summary>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.LineNumber">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.LinePosition">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Tools.Xml.XmlReaderState.HasLineInfo">
            <summary>
            <see langword="true"/> if the current state provides <see cref="P:IS4.SFI.Tools.Xml.XmlReaderState.LineNumber"/>
            and <see cref="P:IS4.SFI.Tools.Xml.XmlReaderState.LinePosition"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.#ctor(System.Xml.XmlReader,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a new state from the current node in an XML reader.
            </summary>
            <param name="reader">The reader to capture the state from.</param>
            <param name="namespaceMap">The map of namespace prefix to value for namespaces valid in the current position.</param>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.GetAttribute(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.GetAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.GetAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.LookupNamespace(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.GetValueAsync">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.MoveToAttribute(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.MoveToAttribute(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.MoveToElement">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.MoveToFirstAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.MoveToNextAttribute">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.Read">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.ReadAttributeValue">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.ResolveEntity">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Tools.Xml.XmlReaderState.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Produces a collection of instances of <see cref="T:IS4.SFI.Tools.Xml.XmlReaderState"/>
            from all the nodes returned by <paramref name="reader"/>,
            by enumerating them using <see cref="M:System.Xml.XmlReader.Read"/>.
            </summary>
            <param name="reader">The reader to capture the states from.</param>
            <returns>The collection of states representing each point of the reading.</returns>
        </member>
        <member name="T:IS4.SFI.UriTools">
            <summary>
            Stores utility methods for manipulating URIs, as instances of <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.UriTools.PrefixFormatter`1">
            <summary>
            A URI formatter which uses a prefix to prepend its argument when forming
            the resulting URI.
            </summary>
        </member>
        <member name="M:IS4.SFI.UriTools.PrefixFormatter`1.#ctor(System.String)">
            <summary>
            Creates a new insntace of the formatter, with the chosen prefix.
            </summary>
            <param name="prefix">The URI prefix to use.</param>
        </member>
        <member name="P:IS4.SFI.UriTools.PrefixFormatter`1.Item(`0)">
            <summary>
            Creates a new URI from the stored prefix, appended with
            <paramref name="value"/>.
            </summary>
            <param name="value">The value to append to the prefix.</param>
            <returns>The full URI formed from the prefix and <paramref name="value"/>.</returns>
        </member>
        <member name="F:IS4.SFI.UriTools.PublicIdFormatter">
            <summary>
            A formatter which uses <see cref="M:IS4.SFI.UriTools.CreatePublicId(System.String)"/> to convert
            PUBLIC identifiers to urn:publicid:.
            </summary>
        </member>
        <member name="F:IS4.SFI.UriTools.DataUriFormatter">
            <summary>
            A formatter which uses <see cref="M:IS4.SFI.UriTools.CreateDataUri(System.String,System.String,System.ArraySegment{System.Byte})"/>
            to create a data: URI from its components.
            </summary>
        </member>
        <member name="M:IS4.SFI.UriTools.CreateDataUri(System.String,System.String,System.ArraySegment{System.Byte})">
            <summary>
            Creates a data: URI from the provided components. The type of the data:
            URI (base64 or percent-encoded) is chosen based on which
            variant is shorter. The result <see cref="T:System.Uri"/>
            also implements <see cref="T:IS4.SFI.Services.IIndividualUriFormatter`1"/> of
            <see cref="T:IS4.SFI.Services.IFormatObject"/>.
            </summary>
            <param name="mediaType">The media type of the resource.</param>
            <param name="charset">The character set of the resource, if textual.</param>
            <param name="bytes">The binary data of the resource.</param>
            <returns>A newly created URI encoding the arguments.</returns>
        </member>
        <member name="T:IS4.SFI.UriTools.DataUri">
            <summary>
            The data: URI produced by <see cref="M:IS4.SFI.UriTools.CreateDataUri(System.String,System.String,System.ArraySegment{System.Byte})"/>.
            Formatting it using <see cref="T:IS4.SFI.Services.IFormatObject"/> will replace
            the media type stored by the URI.
            </summary>
        </member>
        <member name="M:IS4.SFI.UriTools.CreatePublicId(System.String)">
            <summary>
            Creates a new urn:publicid: URI from a PUBLIC identifier,
            according to RFC 3151.
            </summary>
            <param name="id">The PUBLIC identifier to encode.</param>
            <returns>The URI encoding <paramref name="id"/>.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.ExtractPublicId(System.Uri)">
            <summary>
            Decodes a PUBLIC identifier from the corresponding urn:publicid: URI,
            encoded according to RFC 3151.
            </summary>
            <param name="uri">The urn:publicid: URI.</param>
            <returns>The identifier stored in <paramref name="uri"/>, or <see langword="null"/>.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.EscapeDataBytes(System.ArraySegment{System.Byte})">
            <summary>
            Percent-encodes <paramref name="bytes"/> and returns it as a string.
            The encoding follows that of <see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)"/>,
            but the space character is encoded as %20 and hex digits are uppercase.
            </summary>
            <param name="bytes">The byte sequence to encode.</param>
            <returns>
            The encoded string, with each character invalid in a URI encoded.
            </returns>
        </member>
        <member name="M:IS4.SFI.UriTools.EscapeDataBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Percent-encodes <paramref name="bytes"/> and returns it as a string.
            The encoding follows that of <see cref="M:System.Web.HttpUtility.UrlEncode(System.Byte[],System.Int32,System.Int32)"/>,
            but the space character is encoded as %20 and hex digits are uppercase.
            </summary>
            <param name="bytes">The byte array to encode.</param>
            <param name="offset">The position in the array to start encoding.</param>
            <param name="length">The number of bytes to encode.</param>
            <returns>
            The encoded string, with each character invalid in a URI encoded.
            </returns>
        </member>
        <member name="F:IS4.SFI.UriTools.OidUriFormatter">
            <summary>
            A formatter producing urn:oid: URIs from instances of <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
        </member>
        <member name="M:IS4.SFI.UriTools.CreateUuid(System.Guid)">
            <summary>
            Creates a new urn:uuid: URI from a UUID stored as <see cref="T:System.Guid"/>.
            </summary>
            <param name="guid">The UUID to store.</param>
            <returns>The resulting urn:uuid: URI encoding <paramref name="guid"/>.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.ShortenUri(System.Uri,System.Int32,System.String)">
            <summary>
            Shortens individual parts of <paramref name="uri"/>, specifically
            <see cref="P:System.UriBuilder.Path"/>, <see cref="P:System.UriBuilder.Query"/>,
            and <see cref="P:System.UriBuilder.Fragment"/>.
            </summary>
            <param name="uri">The URI to shorten.</param>
            <param name="maxPartLength">The maximum length of each individual component.</param>
            <param name="additionalFragment">Additional text to append after <see cref="P:System.Uri.Fragment"/>.</param>
            <returns>The shortened URI.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.UriToUuidUri(System.Uri)">
            <summary>
            Creates a v5 urn:uuid: URI representing <paramref name="uri"/>.
            </summary>
            <param name="uri">The URI to convert to the UUID.</param>
            <returns>The encoded urn:uuid: URI created from the UUID as the result of <see cref="M:IS4.SFI.UriTools.UuidFromUri(System.Uri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.UuidFromUri(System.Uri)">
            <summary>
            Creates a v5 UUID representing <paramref name="uri"/>.
            </summary>
            <param name="uri">The URI to convert to the UUID.</param>
            <returns>A v5 (SHA-1) based UUID, created using <see cref="M:IS4.SFI.DataTools.GuidFromName(System.Byte[],System.String)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.UriTools.MakeSubUri(System.Uri,System.String,System.Boolean)">
            <summary>
            Produces a URI that is located under <paramref name="uri"/>
            with a specific local name stored in <paramref name="component"/>.
            </summary>
            <param name="uri">The parent URI.</param>
            <param name="component">The name of the component under <paramref name="uri"/>.</param>
            <param name="formRoot">
            Whether the component should form a new hierarchy. If <see langword="true"/>,
            <paramref name="uri"/> and <paramref name="component"/> may be
            joined with <c>#/</c>.
            </param>
            <returns>
            A new instance of <see cref="T:System.Uri"/>, created by joining
            <paramref name="uri"/> and <paramref name="component"/>
            with <c>#</c>, <c>/</c> or <c>#/</c>, depending on their syntax
            and the value of <paramref name="formRoot"/>.
            </returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Classes">
            <summary>
            Contains common RDF classes, with vocabulary prefixes
            taken from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Photograph">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:Photograph.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ImageObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:ImageObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.AudioObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:AudioObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.VideoObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:VideoObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.MediaObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:MediaObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.SoftwareApplication">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:SoftwareApplication.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.DigitalDocument">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:DigitalDocument.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ContentAsText">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:ContentAsText.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ContentAsBase64">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:ContentAsBase64.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ContentAsXML">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:ContentAsXML.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.DoctypeDecl">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:DoctypeDecl.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ArchiveItem">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:ArchiveItem.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Archive">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Archive.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.FileDataObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:FileDataObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Filesystem">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Filesystem.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.FilesystemImage">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:FilesystemImage.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Folder">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Folder.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Executable">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Executable.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Audio">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Audio.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Image">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Image.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Video">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Video.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Document">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:Document.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.MediaStream">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:MediaStream.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.EmbeddedFileDataObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:EmbeddedFileDataObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Message">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nmo"/>:Message.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.ID3Audio">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nid3"/>:ID3Audio.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.IFD">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Exif"/>:IFD.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.XmlDocument">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:Document.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Element">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:Element.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.Digest">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec"/>:Digest.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.X509Certificate">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cert"/>:X509Certificate.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.HttpRequest">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:Request.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.HttpResponse">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:Response.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Classes.HttpMessageHeader">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:MessageHeader.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.ClassUri">
            <summary>
            Represents an RDF class term in a vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ClassUri.Vocabulary">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ClassUri.Term">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ClassUri.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.#ctor(IS4.SFI.Vocabulary.VocabularyUri,System.String)">
            <summary>
            Creates a new instance of the term.
            </summary>
            <param name="vocabulary">The value of <see cref="P:IS4.SFI.Vocabulary.ClassUri.Vocabulary"/>.</param>
            <param name="term">The value of <see cref="P:IS4.SFI.Vocabulary.ClassUri.Term"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)">
            <summary>
            Creates a new instance of the term from a field.
            </summary>
            <param name="uriAttribute">The attribute identifying the vocabulary and local name of the term.</param>
            <param name="fieldName">
            The name of the field, used as a fallback for <see cref="P:IS4.SFI.Vocabulary.ClassUri.Term"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.ClassUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.Equals(IS4.SFI.Vocabulary.ClassUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.op_Equality(IS4.SFI.Vocabulary.ClassUri,IS4.SFI.Vocabulary.ClassUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.ClassUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.ClassUri.Equals(IS4.SFI.Vocabulary.ClassUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.ClassUri.op_Inequality(IS4.SFI.Vocabulary.ClassUri,IS4.SFI.Vocabulary.ClassUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.ClassUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.ClassUri.Equals(IS4.SFI.Vocabulary.ClassUri)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Common">
            <summary>
            Commonly used collections of RDF terms.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.AudioClasses">
            <summary>
            Classes denoting audio objects.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.VideoClasses">
            <summary>
            Classes denoting video objects.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.ImageClasses">
            <summary>
            Classes denoting image objects.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.ApplicationClasses">
            <summary>
            Classes denoting application or executable objects.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.ArchiveClasses">
            <summary>
            Classes denoting archives.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Common.DocumentClasses">
            <summary>
            Classes denoting documents.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Datatypes">
            <summary>
            Contains common RDF datatypes, with vocabulary prefixes
            taken from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.XmlLiteral">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:XMLLiteral.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Html">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:HTML.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Json">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:JSON.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.AnyUri">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:anyURI.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.HexBinary">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:hexBinary.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Base64Binary">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:base64Binary.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Integer">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:integer.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.String">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:string.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.DateTime">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd"/>:dateTime.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Rational">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Owl"/>:rational.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Byte">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dt"/>:byte.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.Hertz">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dt"/>:hertz.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.BitPerSecond">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dt"/>:bitPerSecond.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Datatypes.KilobitPerSecond">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dt"/>:kilobitPerSecond.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.DatatypeUri">
            <summary>
            Represents an RDF datatype term in a vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.DatatypeUri.Vocabulary">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.DatatypeUri.Term">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.DatatypeUri.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.#ctor(IS4.SFI.Vocabulary.VocabularyUri,System.String)">
            <summary>
            Creates a new instance of the term.
            </summary>
            <param name="vocabulary">The value of <see cref="P:IS4.SFI.Vocabulary.DatatypeUri.Vocabulary"/>.</param>
            <param name="term">The value of <see cref="P:IS4.SFI.Vocabulary.DatatypeUri.Term"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)">
            <summary>
            Creates a new instance of the term from a field.
            </summary>
            <param name="uriAttribute">The attribute identifying the vocabulary and local name of the term.</param>
            <param name="fieldName">
            The name of the field, used as a fallback for <see cref="P:IS4.SFI.Vocabulary.DatatypeUri.Term"/>,
            converted via <see cref="M:IS4.SFI.Vocabulary.Extensions.ToCamelCase(System.String)"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.DatatypeUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.Equals(IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.op_Equality(IS4.SFI.Vocabulary.DatatypeUri,IS4.SFI.Vocabulary.DatatypeUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.DatatypeUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.DatatypeUri.Equals(IS4.SFI.Vocabulary.DatatypeUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.DatatypeUri.op_Inequality(IS4.SFI.Vocabulary.DatatypeUri,IS4.SFI.Vocabulary.DatatypeUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.DatatypeUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.DatatypeUri.Equals(IS4.SFI.Vocabulary.DatatypeUri)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Extensions">
            <summary>
            Extension methods for defining RDF vocabularies.
            </summary>
        </member>
        <member name="M:IS4.SFI.Vocabulary.Extensions.InitializeUris(System.Type)">
            <summary>
            Initializes all static (<see cref="F:System.Reflection.BindingFlags.Static"/>) fields on the type
            specified by <paramref name="type"/>, whether they are public (<see cref="F:System.Reflection.BindingFlags.Public"/>)
            or non-public (<see cref="F:System.Reflection.BindingFlags.NonPublic"/>), if they have a corresponding
            custom attribute of type <see cref="T:IS4.SFI.Vocabulary.UriAttribute"/> to the value specified
            by the attribute, such as by calling one of the constructors
            <see cref="M:IS4.SFI.Vocabulary.ClassUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)"/>,
            <see cref="M:IS4.SFI.Vocabulary.PropertyUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)"/>,
            <see cref="M:IS4.SFI.Vocabulary.IndividualUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)"/>,
            <see cref="M:IS4.SFI.Vocabulary.DatatypeUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)"/>,
            or <see cref="M:IS4.SFI.Vocabulary.GraphUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)"/>.
            When called from the type initializer, this also works on read-only fields.
            </summary>
            <param name="type">The type whose fields to initialize.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.Extensions.ToCamelCase(System.String)">
            <summary>
            Converts the first character of a string to lowercase.
            </summary>
            <param name="str">The input string to convert.</param>
            <returns>
            A string with the first character of <paramref name="str"/>
            converted to lowercase, followed by the resf of the string.
            </returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Graphs">
            <summary>
            Contains common RDF graphs, with vocabulary prefixes
            taken from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Graphs.AutoGenerated">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:autoGenerated. This graph stores
            data generated by the corresponding analyzers based on the
            information gathered from input.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Graphs.HumanLabelled">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:humanLabelled. This graph stores
            data that has been entered directly by the user.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Graphs.AutoGuessed">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:autoGuessed. This graph stores
            data that was guessed or auto-recognized
            using some heuristics.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Graphs.Metadata">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:metadata. This graph stores
            information about the analysis process itself.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Graphs.ShortenedLinks">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:shortenedLinks. This graph stores
            links between any URIs that had to be shortened and their
            original form, using <see cref="F:IS4.SFI.Vocabulary.Properties.SameAs"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.GraphUri">
            <summary>
            Represents an RDF graph term in a vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.GraphUri.Vocabulary">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.GraphUri.Term">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.GraphUri.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.#ctor(IS4.SFI.Vocabulary.VocabularyUri,System.String)">
            <summary>
            Creates a new instance of the term.
            </summary>
            <param name="vocabulary">The value of <see cref="P:IS4.SFI.Vocabulary.GraphUri.Vocabulary"/>.</param>
            <param name="term">The value of <see cref="P:IS4.SFI.Vocabulary.GraphUri.Term"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)">
            <summary>
            Creates a new instance of the term from a field.
            </summary>
            <param name="uriAttribute">The attribute identifying the vocabulary and local name of the term.</param>
            <param name="fieldName">
            The name of the field, used as a fallback for <see cref="P:IS4.SFI.Vocabulary.GraphUri.Term"/>,
            converted via <see cref="M:IS4.SFI.Vocabulary.Extensions.ToCamelCase(System.String)"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.GraphUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.Equals(IS4.SFI.Vocabulary.GraphUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.op_Equality(IS4.SFI.Vocabulary.GraphUri,IS4.SFI.Vocabulary.GraphUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.GraphUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.GraphUri.Equals(IS4.SFI.Vocabulary.GraphUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.GraphUri.op_Inequality(IS4.SFI.Vocabulary.GraphUri,IS4.SFI.Vocabulary.GraphUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.GraphUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.GraphUri.Equals(IS4.SFI.Vocabulary.GraphUri)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Individuals">
            <summary>
            Contains common RDF individuals, with vocabulary prefixes
            taken from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.Nil">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:nil.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.MD5">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm"/>:md5.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA1">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Ds"/>:sha1.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA224">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm"/>:sha224.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA256">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Enc"/>:sha256.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA384">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm"/>:sha384.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA512">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Ds"/>:sha512.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.RIPEMD160">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Enc"/>:ripemd160.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA3_224">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2"/>:sha3-224.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA3_256">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2"/>:sha3-256.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA3_384">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2"/>:sha3-384.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.SHA3_512">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2"/>:sha3-512.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.Whirlpool">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2"/>:whirlpool.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.BTIH">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:btih.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.BSHA1_256">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:bsha1-256.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.BSHA1_512">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:bsha1-512.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.BSHA1_1024">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:bsha1-1024.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.DHash">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:dhash.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.Blake3">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:blake3-256.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.Crc32">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:crc32.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.Crc64">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:crc64.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.XxHash32">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:xxhash32.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.XxHash64">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:xxhash64.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.LosslessCompressionType">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:losslessCompressionType.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.LossyCompressionType">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:lossyCompressionType.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.DecryptedStatus">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:decryptedStatus.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Individuals.EncryptedStatus">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:encryptedStatus.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.IndividualUri">
            <summary>
            Represents an RDF individual term in a vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.IndividualUri.Vocabulary">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.IndividualUri.Term">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.IndividualUri.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.#ctor(IS4.SFI.Vocabulary.VocabularyUri,System.String)">
            <summary>
            Creates a new instance of the term.
            </summary>
            <param name="vocabulary">The value of <see cref="P:IS4.SFI.Vocabulary.IndividualUri.Vocabulary"/>.</param>
            <param name="term">The value of <see cref="P:IS4.SFI.Vocabulary.IndividualUri.Term"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)">
            <summary>
            Creates a new instance of the term from a field.
            </summary>
            <param name="uriAttribute">The attribute identifying the vocabulary and local name of the term.</param>
            <param name="fieldName">
            The name of the field, used as a fallback for <see cref="P:IS4.SFI.Vocabulary.IndividualUri.Term"/>,
            converted via <see cref="M:IS4.SFI.Vocabulary.Extensions.ToCamelCase(System.String)"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.IndividualUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.Equals(IS4.SFI.Vocabulary.IndividualUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.op_Equality(IS4.SFI.Vocabulary.IndividualUri,IS4.SFI.Vocabulary.IndividualUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.IndividualUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.IndividualUri.Equals(IS4.SFI.Vocabulary.IndividualUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.IndividualUri.op_Inequality(IS4.SFI.Vocabulary.IndividualUri,IS4.SFI.Vocabulary.IndividualUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.IndividualUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.IndividualUri.Equals(IS4.SFI.Vocabulary.IndividualUri)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.ITermUri">
            <summary>
            Stores information about an RDF term from some vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ITermUri.Vocabulary">
            <summary>
            The vocabulary where the term resides.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ITermUri.Term">
            <summary>
            The local name of the term inside the vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.ITermUri.Value">
            <summary>
            The full value of the term, concatenated from <see cref="P:IS4.SFI.Vocabulary.VocabularyUri.Value"/>
            and <see cref="P:IS4.SFI.Vocabulary.ITermUri.Term"/>.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.LanguageCode">
            <summary>
            A language code used as a language tag of an RDF literal.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.LanguageCode.En">
            <summary>
            The language code for the English language.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.LanguageCode.Value">
            <summary>
            The string value of the language code.
            </summary>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.#ctor(System.String)">
            <summary>
            Creates a new instance of the language code.
            </summary>
            <param name="value">The value of <see cref="P:IS4.SFI.Vocabulary.LanguageCode.Value"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a new instance of the language code from a culture.
            </summary>
            <param name="culture">
            The culture representing the language, as <see cref="P:System.Globalization.CultureInfo.IetfLanguageTag"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.LanguageCode.Value"/>.
            </summary>
            <returns><see cref="P:IS4.SFI.Vocabulary.LanguageCode.Value"/></returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.Equals(IS4.SFI.Vocabulary.LanguageCode)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.op_Equality(IS4.SFI.Vocabulary.LanguageCode,IS4.SFI.Vocabulary.LanguageCode)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.LanguageCode"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.LanguageCode.Equals(IS4.SFI.Vocabulary.LanguageCode)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.LanguageCode.op_Inequality(IS4.SFI.Vocabulary.LanguageCode,IS4.SFI.Vocabulary.LanguageCode)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.LanguageCode"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.LanguageCode.Equals(IS4.SFI.Vocabulary.LanguageCode)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Properties">
            <summary>
            Contains common RDF properties, with vocabulary prefixes
            taken from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Type">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:type.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Value">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:value.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.First">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:first.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Rest">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:rest.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.MemberAt">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf"/>:_nnn.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Label">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdfs"/>:label.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SeeAlso">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdfs"/>:seeAlso.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.IsDefinedBy">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdfs"/>:isDefinedBy.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SameAs">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Owl"/>:sameAs.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.EquivalentProperty">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Owl"/>:equivalentProperty.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Description">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:description.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HasFormat">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:hasFormat.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Extent">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:extent.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Creator">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:creator.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Subject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:subject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Identifier">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:identifier.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Title">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:title.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Language">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:language.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Modified">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:modified.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Created">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:created.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Date">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:date.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Provenance">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms"/>:provenance.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.OriginalName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dbo"/>:originalName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Bytes">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:bytes.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Chars">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:chars.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CharacterEncoding">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:characterEncoding.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.RestXml">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:rest.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DoctypeName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:doctypeName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.PublicId">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:publicId.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SystemId">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:systemId.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.XmlVersion">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:version.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.XmlEncoding">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:declaredEncoding.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.XmlStandalone">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:standalone.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DtDecl">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt"/>:dtDecl.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Depicts">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Foaf"/>:depicts.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CanonicalizationAlgorithm">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec"/>:canonicalizationAlgorithm.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DigestAlgorithm">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec"/>:digestAlgorithm.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DigestValue">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec"/>:digestValue.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Expiration">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec"/>:expiration.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Name">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:name.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DownloadUrl">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:downloadUrl.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Encoding">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:encoding.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.EncodingFormat">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:encodingFormat.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Version">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:version.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SoftwareVersion">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:softwareVersion.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Thumbnail">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:thumbnail.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Image">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:image.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CopyrightNotice">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:copyrightNotice.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Keywords">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:keywords.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Category">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:category.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SerialNumber">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema"/>:serialNumber.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.InterpretedAs">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nie"/>:interpretedAs.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Links">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nie"/>:links.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HasPart">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nie"/>:hasPart.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.MimeType">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nie"/>:mimeType.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FileName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:fileName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.BelongsToContainer">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:belongsToContainer.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FileCreated">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:fileCreated.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FileLastAccessed">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:fileLastAccessed.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FileLastModified">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:fileLastModified.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FileSize">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:fileSize.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FreeSpace">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:freeSpace.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.OccupiedSpace">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:occupiedSpace.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.TotalSpace">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:totalSpace.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FilesystemType">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:filesystemType.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Width">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:width.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Height">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:height.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.BitDepth">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:bitDepth.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.ColorDepth">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:colorDepth.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HorizontalResolution">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:horizontalResolution.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.VerticalResolution">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:verticalResolution.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.PaletteSize">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:paletteSize.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.BitsPerSample">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:bitsPerSample.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Channels">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:channels.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SampleCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:sampleCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.SampleRate">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:sampleRate.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Duration">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:duration.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HasMediaStream">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:hasMediaStream.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.AverageBitrate">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:averageBitrate.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CompressionType">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:compressionType.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.EncryptionStatus">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:encryptionStatus.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CharacterCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:characterCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.LineCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:lineCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.WordCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:wordCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.PageCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:pageCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FrameCount">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:frameCount.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.FrameRate">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo"/>:frameRate.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.MessageId">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nmo"/>:messageId.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.InReplyTo">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nmo"/>:inReplyTo.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.MessageHeader">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nmo"/>:messageHeader.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Broader">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:broader.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.ExactMatch">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:exactMatch.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.CloseMatch">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:closeMatch.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.PrefLabel">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:prefLabel.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.AltLabel">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:altLabel.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Notation">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos"/>:notation.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.DocumentElement">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:documentElement.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.LocalName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:localName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.XmlName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:name.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.XmlPrefix">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:prefix.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.NamespaceName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis"/>:namespaceName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpResponse">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:resp.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpMethodName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:methodName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpMethod">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:mthd.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpAbsoluteUri">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:absoluteURI.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpAbsolutePath">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:absolutePath.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpAuthority">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:authority.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpVersion">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:httpVersion.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpStatusCodeValue">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:statusCodeValue.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpStatusCode">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:sc.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpReasonPhrase">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:reasonPhrase.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpHeaders">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:headers.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpFieldName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:fieldName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpHeaderName">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:hdrName.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpFieldValue">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:fieldValue.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.HttpBody">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http"/>:body.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Digest">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:digest.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Source">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:source.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.AtPrefLabel">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:prefLabel.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.AtAltLabel">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:altLabel.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.PathObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:pathObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.ExtensionObject">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:extensionObject.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.VolumeLabel">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:volumeLabel.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Properties.Visited">
            <summary>
            <see cref="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At"/>:visited.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.PropertyUri">
            <summary>
            Represents an RDF property term in a vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.PropertyUri.Vocabulary">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.PropertyUri.Term">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.PropertyUri.Value">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.#ctor(IS4.SFI.Vocabulary.VocabularyUri,System.String)">
            <summary>
            Creates a new instance of the term.
            </summary>
            <param name="vocabulary">The value of <see cref="P:IS4.SFI.Vocabulary.PropertyUri.Vocabulary"/>.</param>
            <param name="term">The value of <see cref="P:IS4.SFI.Vocabulary.PropertyUri.Term"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.#ctor(IS4.SFI.Vocabulary.UriAttribute,System.String)">
            <summary>
            Creates a new instance of the term from a field.
            </summary>
            <param name="uriAttribute">The attribute identifying the vocabulary and local name of the term.</param>
            <param name="fieldName">
            The name of the field, used as a fallback for <see cref="P:IS4.SFI.Vocabulary.PropertyUri.Term"/>,
            converted via <see cref="M:IS4.SFI.Vocabulary.Extensions.ToCamelCase(System.String)"/>.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.PropertyUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.Equals(IS4.SFI.Vocabulary.PropertyUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.op_Equality(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.PropertyUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.ClassUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.PropertyUri.Equals(IS4.SFI.Vocabulary.PropertyUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.PropertyUri.op_Inequality(IS4.SFI.Vocabulary.PropertyUri,IS4.SFI.Vocabulary.PropertyUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.PropertyUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.PropertyUri.Equals(IS4.SFI.Vocabulary.PropertyUri)"/>.</returns>
        </member>
        <member name="T:IS4.SFI.Vocabulary.UriAttribute">
            <summary>
            Provides information for constructing an RDF term when initializing
            a field.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.UriAttribute.Vocabulary">
            <summary>
            The instance of <see cref="T:IS4.SFI.Vocabulary.VocabularyUri"/> identifying the vocabulary
            containing the term identified by the field.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.UriAttribute.LocalName">
            <summary>
            The proper local name of the term inside the vocabulary, if it is
            different from the name of the field.
            </summary>
        </member>
        <member name="M:IS4.SFI.Vocabulary.UriAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the attribute.
            </summary>
            <param name="vocabulary">The vocabulary URI, stored in <see cref="P:IS4.SFI.Vocabulary.UriAttribute.Vocabulary"/>.</param>
            <param name="localName">The value of <see cref="P:IS4.SFI.Vocabulary.UriAttribute.LocalName"/>.</param>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Vocabularies">
            <summary>
            Contains common RDF vocabularies.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Ad">
            <summary>
            The vocabulary storing hash-identified objects identified
            using <see cref="T:IS4.SFI.Services.AdHashedContentUriFormatter"/>.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.File">
            <summary>
            The vocabulary of all local file: URIs.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Urim">
            <summary>
            The vocabulary for MIME types from uri4uri.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uris">
            <summary>
            The vocabulary for suffixes/file extensions from uri4uri.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Httph">
            <summary>
            The vocabulary for HTTP headers.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Httpm">
            <summary>
            The vocabulary for HTTP methods.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Httpsc">
            <summary>
            The vocabulary for HTTP status codes.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.I18n">
            <summary>
            The vocabulary for datatypes specifying the text language and direction.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.Vocabularies.Uri">
            <summary>
            Stores raw URIs of all used vocabularies.
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdf">
            <summary>
            RDF Vocabulary
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Rdfs">
            <summary>
            RDF Schema Vocabulary
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Skos">
            <summary>
            Simple Knowledge Organization System
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Sec">
            <summary>
            The Security Vocabulary
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dcterms">
            <summary>
            DCMI Metadata Terms
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nfo">
            <summary>
            NEPOMUK File Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nmo">
            <summary>
            NEPOMUK Message Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nie">
            <summary>
            NEPOMUK Information Element Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Nid3">
            <summary>
            NEPOMUK ID3 Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Schema">
            <summary>
            Schema.org
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cnt">
            <summary>
            Representing Content in RDF
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Ds">
            <summary>
            Schema for XML Signatures
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm">
            <summary>
            Additional XML Digital Signature URIs
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dsm2">
            <summary>
            Additional XML Digital Signature URIs 2
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Enc">
            <summary>
            XML Encryption Syntax and Processing
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Foaf">
            <summary>
            FOAF Vocabulary
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Exif">
            <summary>
            EXIF RDF Schema
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xsd">
            <summary>
            XML Schema Datatypes
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Xis">
            <summary>
            XML Infoset
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Owl">
            <summary>
            OWL
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dt">
            <summary>
            DBPedia Datatypes
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Dbo">
            <summary>
            DBPedia Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Urim">
            <summary>
            uri4uri MIME types
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Uris">
            <summary>
            uri4uri suffixes
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Cert">
            <summary>
            The Cert Ontology
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Http">
            <summary>
            HTTP Vocabulary
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Httph">
            <summary>
            HTTP Vocabulary Headers
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Httpm">
            <summary>
            HTTP Vocabulary Methods
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Httpsc">
            <summary>
            HTTP Vocabulary Status Codes
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.I18n">
            <summary>
            The i18n Namespace for language tags and directions
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.File">
            <summary>
            file: URIs
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.At">
            <summary>
            Archive terms
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Uri.Ad">
            <summary>
            Archive data
            </summary>
        </member>
        <member name="F:IS4.SFI.Vocabulary.Vocabularies.Prefixes">
            <summary>
            Contains a collection of all URIs from <see cref="T:IS4.SFI.Vocabulary.Vocabularies.Uri"/> and their common prefix.
            </summary>
        </member>
        <member name="T:IS4.SFI.Vocabulary.VocabularyCache`1">
            <summary>
            The implementation of <see cref="T:IS4.SFI.Services.IVocabularyCache`2"/> for instances
            of <see cref="T:IS4.SFI.Vocabulary.ClassUri"/>, <see cref="T:IS4.SFI.Vocabulary.PropertyUri"/>,
            <see cref="T:IS4.SFI.Vocabulary.IndividualUri"/>, and <see cref="T:IS4.SFI.Vocabulary.DatatypeUri"/>.
            </summary>
            <typeparam name="TNode">The cached node corresponding to the terms.</typeparam>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyCache`1.Item(IS4.SFI.Vocabulary.ClassUri)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyCache`1.Item(IS4.SFI.Vocabulary.PropertyUri)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyCache`1.Item(IS4.SFI.Vocabulary.IndividualUri)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyCache`1.Item(IS4.SFI.Vocabulary.DatatypeUri)">
            <inheritdoc/>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyCache`1.Vocabularies">
            <inheritdoc/>
        </member>
        <member name="E:IS4.SFI.Vocabulary.VocabularyCache`1.VocabularyAdded">
            <summary>
            Fired when a new vocabulary is used.
            </summary>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyCache`1.#ctor(System.Func{System.Uri,`0})">
            <summary>
            Creates a new instance of the cache from a factory function.
            </summary>
            <param name="nodeFactory">
            A function called on the URI of used vocabulary terms,
            producing the cached value.
            </param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyCache`1.CreateNode``2(``0,System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Func{System.Uri,``1})">
            <inheritdoc/>
        </member>
        <member name="T:IS4.SFI.Vocabulary.VocabularyUri">
            <summary>
            Stores the URI of an RDF vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyUri.Value">
            <summary>
            The absolute URI of the vocabulary.
            </summary>
        </member>
        <member name="P:IS4.SFI.Vocabulary.VocabularyUri.Item(System.String)">
            <summary>
            Produces a new URI from a term inside the vocabulary.
            </summary>
            <param name="term">The local name of the term.</param>
            <returns>
            A URI created by concatenating <see cref="P:IS4.SFI.Vocabulary.VocabularyUri.Value"/> and
            <paramref name="term"/>.
            </returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.#ctor(System.String)">
            <summary>
            Creates a new instance of the vocabulary.
            </summary>
            <param name="value">The value of <see cref="P:IS4.SFI.Vocabulary.VocabularyUri.Value"/>.</param>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.ToString">
            <summary>
            Returns <see cref="P:IS4.SFI.Vocabulary.VocabularyUri.Value"/> formatted as a URI node.
            </summary>
            <returns>The formatted value of the instance.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.Equals(IS4.SFI.Vocabulary.VocabularyUri)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.op_Equality(IS4.SFI.Vocabulary.VocabularyUri,IS4.SFI.Vocabulary.VocabularyUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.VocabularyUri"/> for equality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The result of <see cref="M:IS4.SFI.Vocabulary.VocabularyUri.Equals(IS4.SFI.Vocabulary.VocabularyUri)"/>.</returns>
        </member>
        <member name="M:IS4.SFI.Vocabulary.VocabularyUri.op_Inequality(IS4.SFI.Vocabulary.VocabularyUri,IS4.SFI.Vocabulary.VocabularyUri)">
            <summary>
            Compares two instances of <see cref="T:IS4.SFI.Vocabulary.VocabularyUri"/> for inequality.
            </summary>
            <param name="a">The first instance to compare.</param>
            <param name="b">The second instance to compare.</param>
            <returns>The negated result of <see cref="M:IS4.SFI.Vocabulary.VocabularyUri.Equals(IS4.SFI.Vocabulary.VocabularyUri)"/>.</returns>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
